
stm_103c8t6_nrf_recv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d3c  08003d3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d3c  08003d3c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d3c  08003d3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000070  08003db4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08003db4  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f56  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c08  00000000  00000000  00029fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002bbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002c588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e4a  00000000  00000000  0002ce30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c31  00000000  00000000  00041c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d997  00000000  00000000  000498ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cfc  00000000  00000000  000b72c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bb0 	.word	0x08003bb0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003bb0 	.word	0x08003bb0

0800014c <__io_putchar>:
unsigned char * 	pRx_Data			;
unsigned int 	uLength				;
unsigned int		recv_flag			;


int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 f909 	bl	8002374 <HAL_UART_Transmit>
	return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200004c4 	.word	0x200004c4

08000170 <dealWithRxBuffer>:

void dealWithRxBuffer(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000182:	f000 fd6b 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000186:	f000 f873 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018a:	f000 f90d 	bl	80003a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800018e:	f000 f8ab 	bl	80002e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f8df 	bl	8000354 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24L01_Init();
 8000196:	f000 f989 	bl	80004ac <NRF24L01_Init>
  printf("Setup!\n");
 800019a:	482c      	ldr	r0, [pc, #176]	; (800024c <main+0xd0>)
 800019c:	f002 fe2a 	bl	8002df4 <puts>
  printf("NRF24L01 2.4G Test Begin\n");
 80001a0:	482b      	ldr	r0, [pc, #172]	; (8000250 <main+0xd4>)
 80001a2:	f002 fe27 	bl	8002df4 <puts>

  while (NRF24L01_Check()) {
 80001a6:	e006      	b.n	80001b6 <main+0x3a>
	  printf("NRF24L01 Module not detected\n");
 80001a8:	482a      	ldr	r0, [pc, #168]	; (8000254 <main+0xd8>)
 80001aa:	f002 fe23 	bl	8002df4 <puts>
	  HAL_Delay(1000);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 fdb5 	bl	8000d20 <HAL_Delay>
  while (NRF24L01_Check()) {
 80001b6:	f000 f9d7 	bl	8000568 <NRF24L01_Check>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d1f3      	bne.n	80001a8 <main+0x2c>
  }
  printf("NRF24L01 Module Start Work\n");
 80001c0:	4825      	ldr	r0, [pc, #148]	; (8000258 <main+0xdc>)
 80001c2:	f002 fe17 	bl	8002df4 <puts>
  NRF24L01_RX_Mode();
 80001c6:	f000 faeb 	bl	80007a0 <NRF24L01_RX_Mode>
  printf("Receive Data Mode: \n");
 80001ca:	4824      	ldr	r0, [pc, #144]	; (800025c <main+0xe0>)
 80001cc:	f002 fe12 	bl	8002df4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80001d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d4:	4822      	ldr	r0, [pc, #136]	; (8000260 <main+0xe4>)
 80001d6:	f001 f8bb 	bl	8001350 <HAL_GPIO_TogglePin>


	  printf("Ready to send\n");
 80001da:	4822      	ldr	r0, [pc, #136]	; (8000264 <main+0xe8>)
 80001dc:	f002 fe0a 	bl	8002df4 <puts>
	  uint8_t recv_flg = NRF24L01_RxPacket(buff);
 80001e0:	4821      	ldr	r0, [pc, #132]	; (8000268 <main+0xec>)
 80001e2:	f000 fab7 	bl	8000754 <NRF24L01_RxPacket>
 80001e6:	4603      	mov	r3, r0
 80001e8:	70fb      	strb	r3, [r7, #3]
	  if (recv_flg == 0) {
 80001ea:	78fb      	ldrb	r3, [r7, #3]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d123      	bne.n	8000238 <main+0xbc>
		  buff[32] = 0;
 80001f0:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <main+0xec>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	f883 2020 	strb.w	r2, [r3, #32]
		  printf("Successful received : %s\n", buff);
 80001f8:	491b      	ldr	r1, [pc, #108]	; (8000268 <main+0xec>)
 80001fa:	481c      	ldr	r0, [pc, #112]	; (800026c <main+0xf0>)
 80001fc:	f002 fd86 	bl	8002d0c <iprintf>
		  for (int i = 1; i <= 5; i++) {
 8000200:	2301      	movs	r3, #1
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	e014      	b.n	8000230 <main+0xb4>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800020c:	4814      	ldr	r0, [pc, #80]	; (8000260 <main+0xe4>)
 800020e:	f001 f887 	bl	8001320 <HAL_GPIO_WritePin>
			  HAL_Delay(50);
 8000212:	2032      	movs	r0, #50	; 0x32
 8000214:	f000 fd84 	bl	8000d20 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800021e:	4810      	ldr	r0, [pc, #64]	; (8000260 <main+0xe4>)
 8000220:	f001 f87e 	bl	8001320 <HAL_GPIO_WritePin>
			  HAL_Delay(50);
 8000224:	2032      	movs	r0, #50	; 0x32
 8000226:	f000 fd7b 	bl	8000d20 <HAL_Delay>
		  for (int i = 1; i <= 5; i++) {
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3301      	adds	r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b05      	cmp	r3, #5
 8000234:	dde7      	ble.n	8000206 <main+0x8a>
 8000236:	e004      	b.n	8000242 <main+0xc6>
		  }
	  }
	  else {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <main+0xe4>)
 800023e:	f001 f887 	bl	8001350 <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000246:	f000 fd6b 	bl	8000d20 <HAL_Delay>
  {
 800024a:	e7c1      	b.n	80001d0 <main+0x54>
 800024c:	08003bc8 	.word	0x08003bc8
 8000250:	08003bd0 	.word	0x08003bd0
 8000254:	08003bec 	.word	0x08003bec
 8000258:	08003c0c 	.word	0x08003c0c
 800025c:	08003c28 	.word	0x08003c28
 8000260:	40010c00 	.word	0x40010c00
 8000264:	08003c3c 	.word	0x08003c3c
 8000268:	200000a0 	.word	0x200000a0
 800026c:	08003c4c 	.word	0x08003c4c

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	; 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fd3c 	bl	8002cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2310      	movs	r3, #16
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029e:	2300      	movs	r3, #0
 80002a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 f86a 	bl	8001380 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002b2:	f000 f8d5 	bl	8000460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fad6 	bl	8001880 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002da:	f000 f8c1 	bl	8000460 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	; 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_SPI1_Init+0x64>)
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <MX_SPI1_Init+0x68>)
 80002f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f2:	4b16      	ldr	r3, [pc, #88]	; (800034c <MX_SPI1_Init+0x64>)
 80002f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_SPI1_Init+0x64>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_SPI1_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_SPI1_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_SPI1_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_SPI1_Init+0x64>)
 8000314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_SPI1_Init+0x64>)
 800031c:	2200      	movs	r2, #0
 800031e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_SPI1_Init+0x64>)
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_SPI1_Init+0x64>)
 8000328:	2200      	movs	r2, #0
 800032a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <MX_SPI1_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_SPI1_Init+0x64>)
 8000334:	220a      	movs	r2, #10
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_SPI1_Init+0x64>)
 800033a:	f001 fc3d 	bl	8001bb8 <HAL_SPI_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000344:	f000 f88c 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000508 	.word	0x20000508
 8000350:	40013000 	.word	0x40013000

08000354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 800035a:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <MX_USART1_UART_Init+0x50>)
 800035c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 8000360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 800037a:	220c      	movs	r2, #12
 800037c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_USART1_UART_Init+0x4c>)
 800038c:	f001 ffa5 	bl	80022da <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000396:	f000 f863 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200004c4 	.word	0x200004c4
 80003a4:	40013800 	.word	0x40013800

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <MX_GPIO_Init+0xa8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a23      	ldr	r2, [pc, #140]	; (8000450 <MX_GPIO_Init+0xa8>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <MX_GPIO_Init+0xa8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <MX_GPIO_Init+0xa8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <MX_GPIO_Init+0xa8>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_GPIO_Init+0xa8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CSN_Pin|SPI_CE_Pin|LED_Pin|POWER_ON_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
 80003f2:	4818      	ldr	r0, [pc, #96]	; (8000454 <MX_GPIO_Init+0xac>)
 80003f4:	f000 ff94 	bl	8001320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
 80003f8:	2310      	movs	r3, #16
 80003fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <MX_GPIO_Init+0xb0>)
 80003fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000400:	2301      	movs	r3, #1
 8000402:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0308 	add.w	r3, r7, #8
 8000408:	4619      	mov	r1, r3
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_GPIO_Init+0xb4>)
 800040c:	f000 fe2e 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CSN_Pin SPI_CE_Pin LED_Pin POWER_ON_Pin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CE_Pin|LED_Pin|POWER_ON_Pin;
 8000410:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8000414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4619      	mov	r1, r3
 8000428:	480a      	ldr	r0, [pc, #40]	; (8000454 <MX_GPIO_Init+0xac>)
 800042a:	f000 fe1f 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800042e:	2340      	movs	r3, #64	; 0x40
 8000430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	4619      	mov	r1, r3
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_GPIO_Init+0xac>)
 8000442:	f000 fe13 	bl	800106c <HAL_GPIO_Init>

}
 8000446:	bf00      	nop
 8000448:	3718      	adds	r7, #24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	40010c00 	.word	0x40010c00
 8000458:	10110000 	.word	0x10110000
 800045c:	40010800 	.word	0x40010800

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <NRF24L01_SPI_Init>:
const uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0x30,0x30,0x30,0x30,0x31}; //接收地址


//针对NRF24L01修改SPI1驱动
void NRF24L01_SPI_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
    __HAL_SPI_DISABLE(&hspi1);               //先关闭SPI1
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <NRF24L01_SPI_Init+0x3c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <NRF24L01_SPI_Init+0x3c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800047e:	601a      	str	r2, [r3, #0]
    hspi1.Init.CLKPolarity=SPI_POLARITY_LOW; //串行同步时钟的空闲状态为低电平
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <NRF24L01_SPI_Init+0x3c>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase=SPI_PHASE_1EDGE;     //串行同步时钟的第1个跳变沿（上升或下降）数据被采样
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <NRF24L01_SPI_Init+0x3c>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(&hspi1);
 800048c:	4806      	ldr	r0, [pc, #24]	; (80004a8 <NRF24L01_SPI_Init+0x3c>)
 800048e:	f001 fb93 	bl	8001bb8 <HAL_SPI_Init>
    __HAL_SPI_ENABLE(&hspi1);                //使能SPI1
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <NRF24L01_SPI_Init+0x3c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <NRF24L01_SPI_Init+0x3c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000508 	.word	0x20000508

080004ac <NRF24L01_Init>:

//初始化24L01的IO口
void NRF24L01_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
//		GPIO_Initure.Pin=GPIO_PIN_4;							//PA4
//		GPIO_Initure.Mode=GPIO_MODE_INPUT;      	//输入
//		HAL_GPIO_Init(GPIOA,&GPIO_Initure);     	//初始化

//		MX_SPI1_Init();    		              			//初始化SPI1
		NRF24L01_SPI_Init();                			//针对NRF的特点修改SPI的设置
 80004b0:	f7ff ffdc 	bl	800046c <NRF24L01_SPI_Init>
		NRF24L01_CE_LOW(); 			            			//使能24L01
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <NRF24L01_Init+0x24>)
 80004bc:	f000 ff30 	bl	8001320 <HAL_GPIO_WritePin>
		NRF24L01_SPI_CS_DISABLE();			    			//SPI片选取消
 80004c0:	2201      	movs	r2, #1
 80004c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c6:	4802      	ldr	r0, [pc, #8]	; (80004d0 <NRF24L01_Init+0x24>)
 80004c8:	f000 ff2a 	bl	8001320 <HAL_GPIO_WritePin>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <SPI1_SetSpeed>:


static void SPI1_SetSpeed(uint8_t SPI_BaudRatePrescaler)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
    assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//判断有效性
    __HAL_SPI_DISABLE(&hspi1);            //关闭SPI
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <SPI1_SetSpeed+0x58>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <SPI1_SetSpeed+0x58>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80004ec:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1&=0XFFC7;          //位3-5清零，用来设置波特率
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <SPI1_SetSpeed+0x58>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6819      	ldr	r1, [r3, #0]
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <SPI1_SetSpeed+0x58>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80004fc:	400b      	ands	r3, r1
 80004fe:	6013      	str	r3, [r2, #0]
    hspi1.Instance->CR1|=SPI_BaudRatePrescaler;//设置SPI速度
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <SPI1_SetSpeed+0x58>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6819      	ldr	r1, [r3, #0]
 8000506:	79fa      	ldrb	r2, [r7, #7]
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <SPI1_SetSpeed+0x58>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	430a      	orrs	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&hspi1);             //使能SPI
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <SPI1_SetSpeed+0x58>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <SPI1_SetSpeed+0x58>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000508 	.word	0x20000508

08000530 <SPIx_ReadWriteByte>:


uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af02      	add	r7, sp, #8
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
  uint8_t d_read,d_send=byte;
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	73bb      	strb	r3, [r7, #14]
  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)
 8000540:	f107 020f 	add.w	r2, r7, #15
 8000544:	f107 010e 	add.w	r1, r7, #14
 8000548:	23ff      	movs	r3, #255	; 0xff
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2301      	movs	r3, #1
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f001 fb93 	bl	8001c7a <HAL_SPI_TransmitReceive>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SPIx_ReadWriteByte+0x2e>
  {
    d_read=0xFF;
 800055a:	23ff      	movs	r3, #255	; 0xff
 800055c:	73fb      	strb	r3, [r7, #15]
  }
  return d_read;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <NRF24L01_Check>:

uint8_t NRF24L01_Check(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <NRF24L01_Check+0x6c>)
 8000570:	463b      	mov	r3, r7
 8000572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000576:	6018      	str	r0, [r3, #0]
 8000578:	3304      	adds	r3, #4
 800057a:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_2); //spi速度为8.0Mhz（（24L01的最大SPI时钟为10Mhz,这里大一点没关系）
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ffa9 	bl	80004d4 <SPI1_SetSpeed>
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8000582:	463b      	mov	r3, r7
 8000584:	2205      	movs	r2, #5
 8000586:	4619      	mov	r1, r3
 8000588:	2030      	movs	r0, #48	; 0x30
 800058a:	f000 f8ad 	bl	80006e8 <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 800058e:	463b      	mov	r3, r7
 8000590:	2205      	movs	r2, #5
 8000592:	4619      	mov	r1, r3
 8000594:	2010      	movs	r0, #16
 8000596:	f000 f86f 	bl	8000678 <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 800059a:	2300      	movs	r3, #0
 800059c:	71fb      	strb	r3, [r7, #7]
 800059e:	e00a      	b.n	80005b6 <NRF24L01_Check+0x4e>
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f107 0208 	add.w	r2, r7, #8
 80005a6:	4413      	add	r3, r2
 80005a8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80005ac:	2ba5      	cmp	r3, #165	; 0xa5
 80005ae:	d106      	bne.n	80005be <NRF24L01_Check+0x56>
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	3301      	adds	r3, #1
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d9f1      	bls.n	80005a0 <NRF24L01_Check+0x38>
 80005bc:	e000      	b.n	80005c0 <NRF24L01_Check+0x58>
 80005be:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	d001      	beq.n	80005ca <NRF24L01_Check+0x62>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <NRF24L01_Check+0x64>
	return 0;		 	//检测到24L01
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08003c68 	.word	0x08003c68

080005d8 <NRF24L01_Write_Reg>:


uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
  NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <NRF24L01_Write_Reg+0x4c>)
 80005f0:	f000 fe96 	bl	8001320 <HAL_GPIO_WritePin>
  status =SPIx_ReadWriteByte(&hspi1,reg);   //发送寄存器号
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <NRF24L01_Write_Reg+0x50>)
 80005fa:	f7ff ff99 	bl	8000530 <SPIx_ReadWriteByte>
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]
  SPIx_ReadWriteByte(&hspi1,value);         //写入寄存器的值
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	4619      	mov	r1, r3
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <NRF24L01_Write_Reg+0x50>)
 8000608:	f7ff ff92 	bl	8000530 <SPIx_ReadWriteByte>
  NRF24L01_SPI_CS_DISABLE();                //禁止SPI传输
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <NRF24L01_Write_Reg+0x4c>)
 8000614:	f000 fe84 	bl	8001320 <HAL_GPIO_WritePin>
  return(status);       			//返回状态值
 8000618:	7bfb      	ldrb	r3, [r7, #15]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010c00 	.word	0x40010c00
 8000628:	20000508 	.word	0x20000508

0800062c <NRF24L01_Read_Reg>:


uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <NRF24L01_Read_Reg+0x44>)
 800063e:	f000 fe6f 	bl	8001320 <HAL_GPIO_WritePin>
  SPIx_ReadWriteByte(&hspi1,reg);   //发送寄存器号
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	4619      	mov	r1, r3
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <NRF24L01_Read_Reg+0x48>)
 8000648:	f7ff ff72 	bl	8000530 <SPIx_ReadWriteByte>
  reg_val=SPIx_ReadWriteByte(&hspi1,0XFF);//读取寄存器内容
 800064c:	21ff      	movs	r1, #255	; 0xff
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <NRF24L01_Read_Reg+0x48>)
 8000650:	f7ff ff6e 	bl	8000530 <SPIx_ReadWriteByte>
 8000654:	4603      	mov	r3, r0
 8000656:	73fb      	strb	r3, [r7, #15]
  NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <NRF24L01_Read_Reg+0x44>)
 8000660:	f000 fe5e 	bl	8001320 <HAL_GPIO_WritePin>
  return(reg_val);           //返回状态值
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010c00 	.word	0x40010c00
 8000674:	20000508 	.word	0x20000508

08000678 <NRF24L01_Read_Buf>:

uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	4613      	mov	r3, r2
 8000686:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;

  NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068e:	4814      	ldr	r0, [pc, #80]	; (80006e0 <NRF24L01_Read_Buf+0x68>)
 8000690:	f000 fe46 	bl	8001320 <HAL_GPIO_WritePin>
  status=SPIx_ReadWriteByte(&hspi1,reg);//发送寄存器值(位置),并读取状态值
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4619      	mov	r1, r3
 8000698:	4812      	ldr	r0, [pc, #72]	; (80006e4 <NRF24L01_Read_Buf+0x6c>)
 800069a:	f7ff ff49 	bl	8000530 <SPIx_ReadWriteByte>
 800069e:	4603      	mov	r3, r0
 80006a0:	73bb      	strb	r3, [r7, #14]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	e00b      	b.n	80006c0 <NRF24L01_Read_Buf+0x48>
  {
    pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi1,0XFF);//读出数据
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	18d4      	adds	r4, r2, r3
 80006ae:	21ff      	movs	r1, #255	; 0xff
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <NRF24L01_Read_Buf+0x6c>)
 80006b2:	f7ff ff3d 	bl	8000530 <SPIx_ReadWriteByte>
 80006b6:	4603      	mov	r3, r0
 80006b8:	7023      	strb	r3, [r4, #0]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	3301      	adds	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	7bfa      	ldrb	r2, [r7, #15]
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3ef      	bcc.n	80006a8 <NRF24L01_Read_Buf+0x30>
  }
  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <NRF24L01_Read_Buf+0x68>)
 80006d0:	f000 fe26 	bl	8001320 <HAL_GPIO_WritePin>
  return status;        //返回读到的状态值
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	bf00      	nop
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	20000508 	.word	0x20000508

080006e8 <NRF24L01_Write_Buf>:


uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fe:	4813      	ldr	r0, [pc, #76]	; (800074c <NRF24L01_Write_Buf+0x64>)
 8000700:	f000 fe0e 	bl	8001320 <HAL_GPIO_WritePin>
  status = SPIx_ReadWriteByte(&hspi1,reg);//发送寄存器值(位置),并读取状态值
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4619      	mov	r1, r3
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <NRF24L01_Write_Buf+0x68>)
 800070a:	f7ff ff11 	bl	8000530 <SPIx_ReadWriteByte>
 800070e:	4603      	mov	r3, r0
 8000710:	73bb      	strb	r3, [r7, #14]
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	e00a      	b.n	800072e <NRF24L01_Write_Buf+0x46>
  {
    SPIx_ReadWriteByte(&hspi1,*pBuf++); //写入数据
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	603a      	str	r2, [r7, #0]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	480b      	ldr	r0, [pc, #44]	; (8000750 <NRF24L01_Write_Buf+0x68>)
 8000724:	f7ff ff04 	bl	8000530 <SPIx_ReadWriteByte>
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3301      	adds	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3f0      	bcc.n	8000718 <NRF24L01_Write_Buf+0x30>
  }
  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <NRF24L01_Write_Buf+0x64>)
 800073e:	f000 fdef 	bl	8001320 <HAL_GPIO_WritePin>
  return status;          //返回读到的状态值
 8000742:	7bbb      	ldrb	r3, [r7, #14]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40010c00 	.word	0x40010c00
 8000750:	20000508 	.word	0x20000508

08000754 <NRF24L01_RxPacket>:
	return 0xff;//其他原因发送失败
}


uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 800075c:	2010      	movs	r0, #16
 800075e:	f7ff feb9 	bl	80004d4 <SPI1_SetSpeed>
	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8000762:	2007      	movs	r0, #7
 8000764:	f7ff ff62 	bl	800062c <NRF24L01_Read_Reg>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	4619      	mov	r1, r3
 8000770:	2027      	movs	r0, #39	; 0x27
 8000772:	f7ff ff31 	bl	80005d8 <NRF24L01_Write_Reg>
	if(sta&RX_OK)//接收到数据
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00a      	beq.n	8000796 <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 8000780:	2220      	movs	r2, #32
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	2061      	movs	r0, #97	; 0x61
 8000786:	f7ff ff77 	bl	8000678 <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器
 800078a:	21ff      	movs	r1, #255	; 0xff
 800078c:	20e2      	movs	r0, #226	; 0xe2
 800078e:	f7ff ff23 	bl	80005d8 <NRF24L01_Write_Reg>
		return 0;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <NRF24L01_RxPacket+0x44>
	}
	return 1;//没收到任何数据
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <NRF24L01_RX_Mode>:


void NRF24L01_RX_Mode(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007aa:	4815      	ldr	r0, [pc, #84]	; (8000800 <NRF24L01_RX_Mode+0x60>)
 80007ac:	f000 fdb8 	bl	8001320 <HAL_GPIO_WritePin>
  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
 80007b0:	210f      	movs	r1, #15
 80007b2:	2020      	movs	r0, #32
 80007b4:	f7ff ff10 	bl	80005d8 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答
 80007b8:	2101      	movs	r1, #1
 80007ba:	2021      	movs	r0, #33	; 0x21
 80007bc:	f7ff ff0c 	bl	80005d8 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址
 80007c0:	2101      	movs	r1, #1
 80007c2:	2022      	movs	r0, #34	; 0x22
 80007c4:	f7ff ff08 	bl	80005d8 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);	     //设置RF通信频率
 80007c8:	2128      	movs	r1, #40	; 0x28
 80007ca:	2025      	movs	r0, #37	; 0x25
 80007cc:	f7ff ff04 	bl	80005d8 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 80007d0:	210f      	movs	r1, #15
 80007d2:	2026      	movs	r0, #38	; 0x26
 80007d4:	f7ff ff00 	bl	80005d8 <NRF24L01_Write_Reg>

  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 80007d8:	2120      	movs	r1, #32
 80007da:	2031      	movs	r0, #49	; 0x31
 80007dc:	f7ff fefc 	bl	80005d8 <NRF24L01_Write_Reg>

  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址
 80007e0:	2205      	movs	r2, #5
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <NRF24L01_RX_Mode+0x64>)
 80007e4:	202a      	movs	r0, #42	; 0x2a
 80007e6:	f7ff ff7f 	bl	80006e8 <NRF24L01_Write_Buf>

  NRF24L01_CE_HIGH(); //CE为高,进入接收模式
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <NRF24L01_RX_Mode+0x60>)
 80007f2:	f000 fd95 	bl	8001320 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 fa92 	bl	8000d20 <HAL_Delay>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40010c00 	.word	0x40010c00
 8000804:	08003c84 	.word	0x08003c84

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_MspInit+0x5c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a14      	ldr	r2, [pc, #80]	; (8000864 <HAL_MspInit+0x5c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_MspInit+0x5c>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x5c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_MspInit+0x5c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x5c>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_MspInit+0x60>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_MspInit+0x60>)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000
 8000868:	40010000 	.word	0x40010000

0800086c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <HAL_SPI_MspInit+0x98>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d137      	bne.n	80008fc <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <HAL_SPI_MspInit+0x9c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <HAL_SPI_MspInit+0x9c>)
 8000892:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <HAL_SPI_MspInit+0x9c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_SPI_MspInit+0x9c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a17      	ldr	r2, [pc, #92]	; (8000908 <HAL_SPI_MspInit+0x9c>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_SPI_MspInit+0x9c>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <HAL_SPI_MspInit+0xa0>)
 80008d0:	f000 fbcc 	bl	800106c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <HAL_SPI_MspInit+0xa0>)
 80008e8:	f000 fbc0 	bl	800106c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2023      	movs	r0, #35	; 0x23
 80008f2:	f000 fb0e 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008f6:	2023      	movs	r0, #35	; 0x23
 80008f8:	f000 fb27 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40013000 	.word	0x40013000
 8000908:	40021000 	.word	0x40021000
 800090c:	40010800 	.word	0x40010800

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a20      	ldr	r2, [pc, #128]	; (80009ac <HAL_UART_MspInit+0x9c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d139      	bne.n	80009a4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <HAL_UART_MspInit+0xa0>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <HAL_UART_MspInit+0xa0>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <HAL_UART_MspInit+0xa0>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0xa0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0xa0>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_UART_MspInit+0xa0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <HAL_UART_MspInit+0xa4>)
 8000976:	f000 fb79 	bl	800106c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800097a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <HAL_UART_MspInit+0xa4>)
 8000990:	f000 fb6c 	bl	800106c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2025      	movs	r0, #37	; 0x25
 800099a:	f000 faba 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800099e:	2025      	movs	r0, #37	; 0x25
 80009a0:	f000 fad3 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010800 	.word	0x40010800

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <HardFault_Handler+0x4>

080009ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <BusFault_Handler+0x4>

080009d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <UsageFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f970 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <SPI1_IRQHandler+0x10>)
 8000a12:	f001 fad5 	bl	8001fc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000508 	.word	0x20000508

08000a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	/* -- Retrieve one byte data -- */
	HAL_UART_Receive(&huart1, pRx_Data, 1, 100);
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <USART1_IRQHandler+0x4c>)
 8000a26:	6819      	ldr	r1, [r3, #0]
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4810      	ldr	r0, [pc, #64]	; (8000a70 <USART1_IRQHandler+0x50>)
 8000a2e:	f001 fd3a 	bl	80024a6 <HAL_UART_Receive>

	/* -- check data ending -- */
	if (*pRx_Data == '\n')
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <USART1_IRQHandler+0x4c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b0a      	cmp	r3, #10
 8000a3a:	d108      	bne.n	8000a4e <USART1_IRQHandler+0x2e>
	{
		dealWithRxBuffer();
 8000a3c:	f7ff fb98 	bl	8000170 <dealWithRxBuffer>
		pRx_Data = uRx_Data;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <USART1_IRQHandler+0x4c>)
 8000a42:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <USART1_IRQHandler+0x54>)
 8000a44:	601a      	str	r2, [r3, #0]
		uLength = 0;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <USART1_IRQHandler+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	e009      	b.n	8000a62 <USART1_IRQHandler+0x42>
	}
	else
	{
		pRx_Data++;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <USART1_IRQHandler+0x4c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <USART1_IRQHandler+0x4c>)
 8000a56:	6013      	str	r3, [r2, #0]
		uLength++;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <USART1_IRQHandler+0x58>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <USART1_IRQHandler+0x58>)
 8000a60:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <USART1_IRQHandler+0x50>)
 8000a64:	f001 fdc6 	bl	80025f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000098 	.word	0x20000098
 8000a70:	200004c4 	.word	0x200004c4
 8000a74:	200000c4 	.word	0x200000c4
 8000a78:	20000504 	.word	0x20000504

08000a7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e00a      	b.n	8000aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8e:	f3af 8000 	nop.w
 8000a92:	4601      	mov	r1, r0
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	b2ca      	uxtb	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf0      	blt.n	8000a8e <_read+0x12>
	}

return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e009      	b.n	8000adc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fb3b 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf1      	blt.n	8000ac8 <_write+0x12>
	}
	return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_close>:

int _close(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	return -1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b14:	605a      	str	r2, [r3, #4]
	return 0;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <_isatty>:

int _isatty(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	return 1;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b085      	sub	sp, #20
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
	return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
	...

08000b50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x50>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x16>
		heap_end = &end;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <_sbrk+0x50>)
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <_sbrk+0x54>)
 8000b64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <_sbrk+0x50>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <_sbrk+0x50>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	466a      	mov	r2, sp
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d907      	bls.n	8000b8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b7a:	f002 f895 	bl	8002ca8 <__errno>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	230c      	movs	r3, #12
 8000b82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	e006      	b.n	8000b98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <_sbrk+0x50>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <_sbrk+0x50>)
 8000b94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000008c 	.word	0x2000008c
 8000ba4:	20000568 	.word	0x20000568

08000ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <SystemInit+0x5c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <SystemInit+0x5c>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <SystemInit+0x5c>)
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	4911      	ldr	r1, [pc, #68]	; (8000c04 <SystemInit+0x5c>)
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <SystemInit+0x60>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <SystemInit+0x5c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <SystemInit+0x5c>)
 8000bca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <SystemInit+0x5c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SystemInit+0x5c>)
 8000bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <SystemInit+0x5c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <SystemInit+0x5c>)
 8000be6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000bea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SystemInit+0x5c>)
 8000bee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000bf2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SystemInit+0x64>)
 8000bf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bfa:	609a      	str	r2, [r3, #8]
#endif 
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	40021000 	.word	0x40021000
 8000c08:	f8ff0000 	.word	0xf8ff0000
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c12:	e003      	b.n	8000c1c <LoopCopyDataInit>

08000c14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c1a:	3104      	adds	r1, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c24:	d3f6      	bcc.n	8000c14 <CopyDataInit>
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c28:	e002      	b.n	8000c30 <LoopFillZerobss>

08000c2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c2c:	f842 3b04 	str.w	r3, [r2], #4

08000c30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c34:	d3f9      	bcc.n	8000c2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c36:	f7ff ffb7 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f002 f83b 	bl	8002cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff fa9d 	bl	800017c <main>
  bx lr
 8000c42:	4770      	bx	lr
  ldr r3, =_sidata
 8000c44:	08003d44 	.word	0x08003d44
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c4c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000c50:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000c54:	20000568 	.word	0x20000568

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x28>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x28>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f945 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fdc6 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40022000 	.word	0x40022000

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f95d 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f925 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x20>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_IncTick+0x20>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000560 	.word	0x20000560

08000d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <HAL_GetTick+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000560 	.word	0x20000560

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff fff0 	bl	8000d0c <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_Delay+0x40>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d46:	bf00      	nop
 8000d48:	f7ff ffe0 	bl	8000d0c <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4906      	ldr	r1, [pc, #24]	; (8000dfc <__NVIC_EnableIRQ+0x34>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff2d 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff42 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff35 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d005      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e051      	b.n	8001046 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 020e 	bic.w	r2, r2, #14
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0201 	bic.w	r2, r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_DMA_Abort_IT+0xd0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d029      	beq.n	8001020 <HAL_DMA_Abort_IT+0xa0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_DMA_Abort_IT+0xd4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d022      	beq.n	800101c <HAL_DMA_Abort_IT+0x9c>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_DMA_Abort_IT+0xd8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d01a      	beq.n	8001016 <HAL_DMA_Abort_IT+0x96>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_DMA_Abort_IT+0xdc>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d012      	beq.n	8001010 <HAL_DMA_Abort_IT+0x90>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_DMA_Abort_IT+0xe0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00a      	beq.n	800100a <HAL_DMA_Abort_IT+0x8a>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <HAL_DMA_Abort_IT+0xe4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d102      	bne.n	8001004 <HAL_DMA_Abort_IT+0x84>
 8000ffe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001002:	e00e      	b.n	8001022 <HAL_DMA_Abort_IT+0xa2>
 8001004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001008:	e00b      	b.n	8001022 <HAL_DMA_Abort_IT+0xa2>
 800100a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100e:	e008      	b.n	8001022 <HAL_DMA_Abort_IT+0xa2>
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	e005      	b.n	8001022 <HAL_DMA_Abort_IT+0xa2>
 8001016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101a:	e002      	b.n	8001022 <HAL_DMA_Abort_IT+0xa2>
 800101c:	2310      	movs	r3, #16
 800101e:	e000      	b.n	8001022 <HAL_DMA_Abort_IT+0xa2>
 8001020:	2301      	movs	r3, #1
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <HAL_DMA_Abort_IT+0xe8>)
 8001024:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	4798      	blx	r3
    } 
  }
  return status;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40020008 	.word	0x40020008
 8001054:	4002001c 	.word	0x4002001c
 8001058:	40020030 	.word	0x40020030
 800105c:	40020044 	.word	0x40020044
 8001060:	40020058 	.word	0x40020058
 8001064:	4002006c 	.word	0x4002006c
 8001068:	40020000 	.word	0x40020000

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b08b      	sub	sp, #44	; 0x2c
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e127      	b.n	80012d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001080:	2201      	movs	r2, #1
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8116 	bne.w	80012ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d034      	beq.n	8001110 <HAL_GPIO_Init+0xa4>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d80d      	bhi.n	80010c6 <HAL_GPIO_Init+0x5a>
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x9a>
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d804      	bhi.n	80010bc <HAL_GPIO_Init+0x50>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d031      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d01c      	beq.n	80010f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ba:	e048      	b.n	800114e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d043      	beq.n	8001148 <HAL_GPIO_Init+0xdc>
 80010c0:	2b11      	cmp	r3, #17
 80010c2:	d01b      	beq.n	80010fc <HAL_GPIO_Init+0x90>
          break;
 80010c4:	e043      	b.n	800114e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010c6:	4a89      	ldr	r2, [pc, #548]	; (80012ec <HAL_GPIO_Init+0x280>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d026      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010cc:	4a87      	ldr	r2, [pc, #540]	; (80012ec <HAL_GPIO_Init+0x280>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d806      	bhi.n	80010e0 <HAL_GPIO_Init+0x74>
 80010d2:	4a87      	ldr	r2, [pc, #540]	; (80012f0 <HAL_GPIO_Init+0x284>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d020      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010d8:	4a86      	ldr	r2, [pc, #536]	; (80012f4 <HAL_GPIO_Init+0x288>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01d      	beq.n	800111a <HAL_GPIO_Init+0xae>
          break;
 80010de:	e036      	b.n	800114e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010e0:	4a85      	ldr	r2, [pc, #532]	; (80012f8 <HAL_GPIO_Init+0x28c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010e6:	4a85      	ldr	r2, [pc, #532]	; (80012fc <HAL_GPIO_Init+0x290>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d016      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010ec:	4a84      	ldr	r2, [pc, #528]	; (8001300 <HAL_GPIO_Init+0x294>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0xae>
          break;
 80010f2:	e02c      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e028      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	3304      	adds	r3, #4
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e023      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	3308      	adds	r3, #8
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e01e      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	330c      	adds	r3, #12
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e019      	b.n	800114e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001122:	2304      	movs	r3, #4
 8001124:	623b      	str	r3, [r7, #32]
          break;
 8001126:	e012      	b.n	800114e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d105      	bne.n	800113c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001130:	2308      	movs	r3, #8
 8001132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	611a      	str	r2, [r3, #16]
          break;
 800113a:	e008      	b.n	800114e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	615a      	str	r2, [r3, #20]
          break;
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d801      	bhi.n	8001158 <HAL_GPIO_Init+0xec>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	e001      	b.n	800115c <HAL_GPIO_Init+0xf0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3304      	adds	r3, #4
 800115c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	2bff      	cmp	r3, #255	; 0xff
 8001162:	d802      	bhi.n	800116a <HAL_GPIO_Init+0xfe>
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x104>
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	3b08      	subs	r3, #8
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	210f      	movs	r1, #15
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	401a      	ands	r2, r3
 8001182:	6a39      	ldr	r1, [r7, #32]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 8096 	beq.w	80012ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800119e:	4b59      	ldr	r3, [pc, #356]	; (8001304 <HAL_GPIO_Init+0x298>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a58      	ldr	r2, [pc, #352]	; (8001304 <HAL_GPIO_Init+0x298>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b56      	ldr	r3, [pc, #344]	; (8001304 <HAL_GPIO_Init+0x298>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011b6:	4a54      	ldr	r2, [pc, #336]	; (8001308 <HAL_GPIO_Init+0x29c>)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x2a0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x19e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x2a4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x19a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x2a8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x196>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x2ac>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x192>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x1a0>
 80011fe:	2304      	movs	r3, #4
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x1a0>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x1a0>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x1a0>
 800120a:	2300      	movs	r3, #0
 800120c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800121c:	493a      	ldr	r1, [pc, #232]	; (8001308 <HAL_GPIO_Init+0x29c>)
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4938      	ldr	r1, [pc, #224]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
 8001242:	e006      	b.n	8001252 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001244:	4b35      	ldr	r3, [pc, #212]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	43db      	mvns	r3, r3
 800124c:	4933      	ldr	r1, [pc, #204]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800124e:	4013      	ands	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	492e      	ldr	r1, [pc, #184]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	43db      	mvns	r3, r3
 8001274:	4929      	ldr	r1, [pc, #164]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001276:	4013      	ands	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	4924      	ldr	r1, [pc, #144]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
 8001292:	e006      	b.n	80012a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	43db      	mvns	r3, r3
 800129c:	491f      	ldr	r1, [pc, #124]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800129e:	4013      	ands	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_GPIO_Init+0x2b0>)
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	491a      	ldr	r1, [pc, #104]	; (800131c <HAL_GPIO_Init+0x2b0>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60cb      	str	r3, [r1, #12]
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_GPIO_Init+0x2b0>)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4915      	ldr	r1, [pc, #84]	; (800131c <HAL_GPIO_Init+0x2b0>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	3301      	adds	r3, #1
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	fa22 f303 	lsr.w	r3, r2, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f47f aed0 	bne.w	8001080 <HAL_GPIO_Init+0x14>
  }
}
 80012e0:	bf00      	nop
 80012e2:	372c      	adds	r7, #44	; 0x2c
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	10210000 	.word	0x10210000
 80012f0:	10110000 	.word	0x10110000
 80012f4:	10120000 	.word	0x10120000
 80012f8:	10310000 	.word	0x10310000
 80012fc:	10320000 	.word	0x10320000
 8001300:	10220000 	.word	0x10220000
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00
 8001314:	40011000 	.word	0x40011000
 8001318:	40011400 	.word	0x40011400
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800133c:	e003      	b.n	8001346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	611a      	str	r2, [r3, #16]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001368:	887a      	ldrh	r2, [r7, #2]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800136e:	e002      	b.n	8001376 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001370:	887a      	ldrh	r2, [r7, #2]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e26c      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8087 	beq.w	80014ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d00c      	beq.n	80013c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ac:	4b8f      	ldr	r3, [pc, #572]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d112      	bne.n	80013de <HAL_RCC_OscConfig+0x5e>
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d10b      	bne.n	80013de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c6:	4b89      	ldr	r3, [pc, #548]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d06c      	beq.n	80014ac <HAL_RCC_OscConfig+0x12c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d168      	bne.n	80014ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e246      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x76>
 80013e8:	4b80      	ldr	r3, [pc, #512]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a7f      	ldr	r2, [pc, #508]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e02e      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7a      	ldr	r2, [pc, #488]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b78      	ldr	r3, [pc, #480]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a77      	ldr	r2, [pc, #476]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0xbc>
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a71      	ldr	r2, [pc, #452]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 800143c:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6a      	ldr	r2, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a67      	ldr	r2, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fc56 	bl	8000d0c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc52 	bl	8000d0c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1fa      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xe4>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fc42 	bl	8000d0c <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc3e 	bl	8000d0c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1e6      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x10c>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014c6:	4b49      	ldr	r3, [pc, #292]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x18c>
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1ba      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4939      	ldr	r1, [pc, #228]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fbf7 	bl	8000d0c <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fbf3 	bl	8000d0c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e19b      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4927      	ldr	r1, [pc, #156]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fbd6 	bl	8000d0c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fbd2 	bl	8000d0c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e17a      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d03a      	beq.n	8001604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d019      	beq.n	80015ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fbb6 	bl	8000d0c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fbb2 	bl	8000d0c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e15a      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 fada 	bl	8001b7c <RCC_Delay>
 80015c8:	e01c      	b.n	8001604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fb9c 	bl	8000d0c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d6:	e00f      	b.n	80015f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fb98 	bl	8000d0c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d908      	bls.n	80015f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e140      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	42420000 	.word	0x42420000
 80015f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	4b9e      	ldr	r3, [pc, #632]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1e9      	bne.n	80015d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a6 	beq.w	800175e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001616:	4b97      	ldr	r3, [pc, #604]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10d      	bne.n	800163e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b94      	ldr	r3, [pc, #592]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a93      	ldr	r2, [pc, #588]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b91      	ldr	r3, [pc, #580]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b8e      	ldr	r3, [pc, #568]	; (8001878 <HAL_RCC_OscConfig+0x4f8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164a:	4b8b      	ldr	r3, [pc, #556]	; (8001878 <HAL_RCC_OscConfig+0x4f8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a8a      	ldr	r2, [pc, #552]	; (8001878 <HAL_RCC_OscConfig+0x4f8>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fb59 	bl	8000d0c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff fb55 	bl	8000d0c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e0fd      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b81      	ldr	r3, [pc, #516]	; (8001878 <HAL_RCC_OscConfig+0x4f8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x312>
 8001684:	4b7b      	ldr	r3, [pc, #492]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a7a      	ldr	r2, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e02d      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x334>
 800169a:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a75      	ldr	r2, [pc, #468]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b73      	ldr	r3, [pc, #460]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a72      	ldr	r2, [pc, #456]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	e01c      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x356>
 80016bc:	4b6d      	ldr	r3, [pc, #436]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a6c      	ldr	r2, [pc, #432]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a69      	ldr	r2, [pc, #420]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e00b      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a66      	ldr	r2, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d015      	beq.n	8001722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fb09 	bl	8000d0c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fb05 	bl	8000d0c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0ab      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	4b57      	ldr	r3, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ee      	beq.n	80016fe <HAL_RCC_OscConfig+0x37e>
 8001720:	e014      	b.n	800174c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff faf3 	bl	8000d0c <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff faef 	bl	8000d0c <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e095      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ee      	bne.n	800172a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d105      	bne.n	800175e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001752:	4b48      	ldr	r3, [pc, #288]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a47      	ldr	r2, [pc, #284]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8081 	beq.w	800186a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	4b42      	ldr	r3, [pc, #264]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d061      	beq.n	8001838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d146      	bne.n	800180a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_OscConfig+0x4fc>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fac3 	bl	8000d0c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fabf 	bl	8000d0c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e067      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179c:	4b35      	ldr	r3, [pc, #212]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	492d      	ldr	r1, [pc, #180]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a19      	ldr	r1, [r3, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	430b      	orrs	r3, r1
 80017d6:	4927      	ldr	r1, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_OscConfig+0x4fc>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fa93 	bl	8000d0c <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fa8f 	bl	8000d0c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e037      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x46a>
 8001808:	e02f      	b.n	800186a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_RCC_OscConfig+0x4fc>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fa7c 	bl	8000d0c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fa78 	bl	8000d0c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e020      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x498>
 8001836:	e018      	b.n	800186a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e013      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	429a      	cmp	r2, r3
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	40007000 	.word	0x40007000
 800187c:	42420060 	.word	0x42420060

08001880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0d0      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d910      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 0207 	bic.w	r2, r3, #7
 80018aa:	4965      	ldr	r1, [pc, #404]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d040      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d115      	bne.n	800195e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d109      	bne.n	800195e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e073      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06b      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f023 0203 	bic.w	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4936      	ldr	r1, [pc, #216]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001970:	f7ff f9cc 	bl	8000d0c <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	e00a      	b.n	800198e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff f9c8 	bl	8000d0c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e053      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 020c 	and.w	r2, r3, #12
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	429a      	cmp	r2, r3
 800199e:	d1eb      	bne.n	8001978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d210      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 0207 	bic.w	r2, r3, #7
 80019b6:	4922      	ldr	r1, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4601      	mov	r1, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	fa21 f303 	lsr.w	r3, r1, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1cc>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1d0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f92a 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	08003c8c 	.word	0x08003c8c
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	b490      	push	{r4, r7}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a5c:	1d3c      	adds	r4, r7, #4
 8001a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a64:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x46>
 8001a92:	e02d      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a96:	623b      	str	r3, [r7, #32]
      break;
 8001a98:	e02d      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	0c9b      	lsrs	r3, r3, #18
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0c5b      	lsrs	r3, r3, #17
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001acc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ad2:	fb02 f203 	mul.w	r2, r2, r3
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e004      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	623b      	str	r3, [r7, #32]
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001af2:	623b      	str	r3, [r7, #32]
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	6a3b      	ldr	r3, [r7, #32]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc90      	pop	{r4, r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	08003c70 	.word	0x08003c70
 8001b08:	08003c80 	.word	0x08003c80
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	007a1200 	.word	0x007a1200
 8001b14:	003d0900 	.word	0x003d0900

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff2 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b34:	4601      	mov	r1, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08003c9c 	.word	0x08003c9c

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4601      	mov	r1, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4a03      	ldr	r2, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08003c9c 	.word	0x08003c9c

08001b7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <RCC_Delay+0x34>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <RCC_Delay+0x38>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0a5b      	lsrs	r3, r3, #9
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b98:	bf00      	nop
  }
  while (Delay --);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	60fa      	str	r2, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f9      	bne.n	8001b98 <RCC_Delay+0x1c>
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	10624dd3 	.word	0x10624dd3

08001bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e053      	b.n	8001c72 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d106      	bne.n	8001bea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7fe fe41 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2202      	movs	r2, #2
 8001bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c00:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	ea42 0103 	orr.w	r1, r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	0c1a      	lsrs	r2, r3, #16
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f002 0204 	and.w	r2, r2, #4
 8001c50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b08c      	sub	sp, #48	; 0x30
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_SPI_TransmitReceive+0x26>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e18a      	b.n	8001fb6 <HAL_SPI_TransmitReceive+0x33c>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ca8:	f7ff f830 	bl	8000d0c <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d00f      	beq.n	8001cea <HAL_SPI_TransmitReceive+0x70>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cd0:	d107      	bne.n	8001ce2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d103      	bne.n	8001ce2 <HAL_SPI_TransmitReceive+0x68>
 8001cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d003      	beq.n	8001cea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ce8:	e15b      	b.n	8001fa2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0x82>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0x82>
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d103      	bne.n	8001d04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d02:	e14e      	b.n	8001fa2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d003      	beq.n	8001d18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2205      	movs	r2, #5
 8001d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	887a      	ldrh	r2, [r7, #2]
 8001d2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	887a      	ldrh	r2, [r7, #2]
 8001d3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b40      	cmp	r3, #64	; 0x40
 8001d5a:	d007      	beq.n	8001d6c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d74:	d178      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_SPI_TransmitReceive+0x10a>
 8001d7e:	8b7b      	ldrh	r3, [r7, #26]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d166      	bne.n	8001e52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	881a      	ldrh	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	1c9a      	adds	r2, r3, #2
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001da8:	e053      	b.n	8001e52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d11b      	bne.n	8001df0 <HAL_SPI_TransmitReceive+0x176>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_SPI_TransmitReceive+0x176>
 8001dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d113      	bne.n	8001df0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	881a      	ldrh	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	1c9a      	adds	r2, r3, #2
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d119      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x1b8>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d014      	beq.n	8001e32 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e12:	b292      	uxth	r2, r2
 8001e14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	1c9a      	adds	r2, r3, #2
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e32:	f7fe ff6b 	bl	8000d0c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d807      	bhi.n	8001e52 <HAL_SPI_TransmitReceive+0x1d8>
 8001e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d003      	beq.n	8001e52 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e50:	e0a7      	b.n	8001fa2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1a6      	bne.n	8001daa <HAL_SPI_TransmitReceive+0x130>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1a1      	bne.n	8001daa <HAL_SPI_TransmitReceive+0x130>
 8001e66:	e07c      	b.n	8001f62 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_SPI_TransmitReceive+0x1fc>
 8001e70:	8b7b      	ldrh	r3, [r7, #26]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d16b      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e9c:	e057      	b.n	8001f4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d11c      	bne.n	8001ee6 <HAL_SPI_TransmitReceive+0x26c>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d017      	beq.n	8001ee6 <HAL_SPI_TransmitReceive+0x26c>
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d114      	bne.n	8001ee6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	7812      	ldrb	r2, [r2, #0]
 8001ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d119      	bne.n	8001f28 <HAL_SPI_TransmitReceive+0x2ae>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d014      	beq.n	8001f28 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f24:	2301      	movs	r3, #1
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f28:	f7fe fef0 	bl	8000d0c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d803      	bhi.n	8001f40 <HAL_SPI_TransmitReceive+0x2c6>
 8001f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3e:	d102      	bne.n	8001f46 <HAL_SPI_TransmitReceive+0x2cc>
 8001f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f4c:	e029      	b.n	8001fa2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1a2      	bne.n	8001e9e <HAL_SPI_TransmitReceive+0x224>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d19d      	bne.n	8001e9e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f999 	bl	800229e <SPI_EndRxTxTransaction>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f7e:	e010      	b.n	8001fa2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10b      	bne.n	8001fa0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	e000      	b.n	8001fa2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001fa0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3730      	adds	r7, #48	; 0x30
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	099b      	lsrs	r3, r3, #6
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10f      	bne.n	8002004 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    return;
 8002002:	e0bf      	b.n	8002184 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_SPI_IRQHandler+0x66>
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	09db      	lsrs	r3, r3, #7
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
    return;
 8002024:	e0ae      	b.n	8002184 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_SPI_IRQHandler+0x80>
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80a2 	beq.w	8002184 <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 809b 	beq.w	8002184 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d023      	beq.n	80020a2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b03      	cmp	r3, #3
 8002064:	d011      	beq.n	800208a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0204 	orr.w	r2, r3, #4
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	e00b      	b.n	80020a2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
        return;
 80020a0:	e070      	b.n	8002184 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d014      	beq.n	80020d8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d050      	beq.n	8002182 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d104      	bne.n	800210c <HAL_SPI_IRQHandler+0x14c>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d034      	beq.n	8002176 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0203 	bic.w	r2, r2, #3
 800211a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d011      	beq.n	8002148 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_SPI_IRQHandler+0x1cc>)
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe ff25 	bl	8000f80 <HAL_DMA_Abort_IT>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	2b00      	cmp	r3, #0
 800214e:	d016      	beq.n	800217e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_SPI_IRQHandler+0x1cc>)
 8002156:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ff0f 	bl	8000f80 <HAL_DMA_Abort_IT>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002174:	e003      	b.n	800217e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f80a 	bl	8002190 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800217c:	e000      	b.n	8002180 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800217e:	bf00      	nop
    return;
 8002180:	bf00      	nop
 8002182:	bf00      	nop
  }
}
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	080021a3 	.word	0x080021a3

08002190 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f7ff ffe7 	bl	8002190 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021da:	e04c      	b.n	8002276 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d048      	beq.n	8002276 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021e4:	f7fe fd92 	bl	8000d0c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d902      	bls.n	80021fa <SPI_WaitFlagStateUntilTimeout+0x30>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d13d      	bne.n	8002276 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002212:	d111      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221c:	d004      	beq.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	d107      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002240:	d10f      	bne.n	8002262 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e00f      	b.n	8002296 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	bf0c      	ite	eq
 8002286:	2301      	moveq	r3, #1
 8002288:	2300      	movne	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	429a      	cmp	r2, r3
 8002292:	d1a3      	bne.n	80021dc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af02      	add	r7, sp, #8
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2200      	movs	r2, #0
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f7ff ff88 	bl	80021ca <SPI_WaitFlagStateUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e000      	b.n	80022d2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e03f      	b.n	800236c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe fb05 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2224      	movs	r2, #36	; 0x24
 800230a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800231c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fbe8 	bl	8002af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002332:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002342:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002352:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	f040 8083 	bne.w	800249c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_UART_Transmit+0x2e>
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07b      	b.n	800249e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_UART_Transmit+0x40>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e074      	b.n	800249e <HAL_UART_Transmit+0x12a>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2221      	movs	r2, #33	; 0x21
 80023c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80023ca:	f7fe fc9f 	bl	8000d0c <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023dc:	e042      	b.n	8002464 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f4:	d122      	bne.n	800243c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fa0e 	bl	8002822 <UART_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e046      	b.n	800249e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002422:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d103      	bne.n	8002434 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3302      	adds	r3, #2
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	e017      	b.n	8002464 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3301      	adds	r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	e013      	b.n	8002464 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2200      	movs	r2, #0
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9eb 	bl	8002822 <UART_WaitOnFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e023      	b.n	800249e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	60ba      	str	r2, [r7, #8]
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1b7      	bne.n	80023de <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	2140      	movs	r1, #64	; 0x40
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f9d2 	bl	8002822 <UART_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e00a      	b.n	800249e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b088      	sub	sp, #32
 80024aa:	af02      	add	r7, sp, #8
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	f040 8090 	bne.w	80025e8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_UART_Receive+0x2e>
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e088      	b.n	80025ea <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_UART_Receive+0x40>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e081      	b.n	80025ea <HAL_UART_Receive+0x144>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2222      	movs	r2, #34	; 0x22
 80024f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024fc:	f7fe fc06 	bl	8000d0c <HAL_GetTick>
 8002500:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	88fa      	ldrh	r2, [r7, #6]
 8002506:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800250e:	e05c      	b.n	80025ca <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002526:	d12b      	bne.n	8002580 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2200      	movs	r2, #0
 8002530:	2120      	movs	r1, #32
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f975 	bl	8002822 <UART_WaitOnFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e053      	b.n	80025ea <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	b29b      	uxth	r3, r3
 8002556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255a:	b29a      	uxth	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	3302      	adds	r3, #2
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	e030      	b.n	80025ca <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	b29b      	uxth	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	b29a      	uxth	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3301      	adds	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	e024      	b.n	80025ca <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	2120      	movs	r1, #32
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f949 	bl	8002822 <UART_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e027      	b.n	80025ea <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60ba      	str	r2, [r7, #8]
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e00a      	b.n	80025ca <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d19d      	bne.n	8002510 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10d      	bne.n	8002646 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_UART_IRQHandler+0x52>
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f9d7 	bl	80029f2 <UART_Receive_IT>
      return;
 8002644:	e0cc      	b.n	80027e0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80ab 	beq.w	80027a4 <HAL_UART_IRQHandler+0x1b0>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_UART_IRQHandler+0x70>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80a0 	beq.w	80027a4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_UART_IRQHandler+0x90>
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	f043 0201 	orr.w	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_UART_IRQHandler+0xb0>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	f043 0202 	orr.w	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_UART_IRQHandler+0xd0>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	f043 0204 	orr.w	r2, r3, #4
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_UART_IRQHandler+0xf0>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	f043 0208 	orr.w	r2, r3, #8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d078      	beq.n	80027de <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_UART_IRQHandler+0x112>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f976 	bl	80029f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <HAL_UART_IRQHandler+0x13a>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d031      	beq.n	8002792 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8c1 	bl	80028b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d023      	beq.n	800278a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002750:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	2b00      	cmp	r3, #0
 8002758:	d013      	beq.n	8002782 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_UART_IRQHandler+0x1f4>)
 8002760:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fc0a 	bl	8000f80 <HAL_DMA_Abort_IT>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800277c:	4610      	mov	r0, r2
 800277e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002780:	e00e      	b.n	80027a0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f844 	bl	8002810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002788:	e00a      	b.n	80027a0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f840 	bl	8002810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	e006      	b.n	80027a0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f83c 	bl	8002810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800279e:	e01e      	b.n	80027de <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a0:	bf00      	nop
    return;
 80027a2:	e01c      	b.n	80027de <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_UART_IRQHandler+0x1cc>
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f8ad 	bl	8002918 <UART_Transmit_IT>
    return;
 80027be:	e00f      	b.n	80027e0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_UART_IRQHandler+0x1ec>
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8f4 	bl	80029c2 <UART_EndTransmit_IT>
    return;
 80027da:	bf00      	nop
 80027dc:	e000      	b.n	80027e0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80027de:	bf00      	nop
  }
}
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	080028f1 	.word	0x080028f1

080027ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002832:	e02c      	b.n	800288e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d028      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0x30>
 8002842:	f7fe fa63 	bl	8000d0c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	429a      	cmp	r2, r3
 8002850:	d21d      	bcs.n	800288e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002860:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e00f      	b.n	80028ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d0c3      	beq.n	8002834 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff ff80 	bl	8002810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b21      	cmp	r3, #33	; 0x21
 800292a:	d144      	bne.n	80029b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002934:	d11a      	bne.n	800296c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800294a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	1c9a      	adds	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	621a      	str	r2, [r3, #32]
 800295e:	e00e      	b.n	800297e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]
 800296a:	e008      	b.n	800297e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	1c59      	adds	r1, r3, #1
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6211      	str	r1, [r2, #32]
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29b      	uxth	r3, r3
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4619      	mov	r1, r3
 800298c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ff02 	bl	80027ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b22      	cmp	r3, #34	; 0x22
 8002a04:	d171      	bne.n	8002aea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0e:	d123      	bne.n	8002a58 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10e      	bne.n	8002a3c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	1c9a      	adds	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
 8002a3a:	e029      	b.n	8002a90 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
 8002a56:	e01b      	b.n	8002a90 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6858      	ldr	r0, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	1c59      	adds	r1, r3, #1
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6291      	str	r1, [r2, #40]	; 0x28
 8002a70:	b2c2      	uxtb	r2, r0
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e00c      	b.n	8002a90 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	6288      	str	r0, [r1, #40]	; 0x28
 8002a88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d120      	bne.n	8002ae6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0220 	bic.w	r2, r2, #32
 8002ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fe8e 	bl	80027fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e002      	b.n	8002aec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b2e:	f023 030c 	bic.w	r3, r3, #12
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <UART_SetConfig+0x1ac>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d14e      	bne.n	8002bfa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b5c:	f7fe fffa 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 8002b60:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	009a      	lsls	r2, r3, #2
 8002b6c:	441a      	add	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	0119      	lsls	r1, r3, #4
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009a      	lsls	r2, r3, #2
 8002b8c:	441a      	add	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2064      	movs	r0, #100	; 0x64
 8002ba2:	fb00 f303 	mul.w	r3, r0, r3
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	3332      	adds	r3, #50	; 0x32
 8002bac:	4a3d      	ldr	r2, [pc, #244]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb8:	4419      	add	r1, r3
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2064      	movs	r0, #100	; 0x64
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	3332      	adds	r3, #50	; 0x32
 8002be4:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	f003 020f 	and.w	r2, r3, #15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	440a      	add	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002bf8:	e04d      	b.n	8002c96 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bfa:	f7fe ff97 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8002bfe:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009a      	lsls	r2, r3, #2
 8002c0a:	441a      	add	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	0119      	lsls	r1, r3, #4
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	009a      	lsls	r2, r3, #2
 8002c2a:	441a      	add	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002c38:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	2064      	movs	r0, #100	; 0x64
 8002c40:	fb00 f303 	mul.w	r3, r0, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	3332      	adds	r3, #50	; 0x32
 8002c4a:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c56:	4419      	add	r1, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009a      	lsls	r2, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002c70:	fba3 0302 	umull	r0, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	2064      	movs	r0, #100	; 0x64
 8002c78:	fb00 f303 	mul.w	r3, r0, r3
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	3332      	adds	r3, #50	; 0x32
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <UART_SetConfig+0x1b0>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	f003 020f 	and.w	r2, r3, #15
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	440a      	add	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	51eb851f 	.word	0x51eb851f

08002ca8 <__errno>:
 8002ca8:	4b01      	ldr	r3, [pc, #4]	; (8002cb0 <__errno+0x8>)
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	2500      	movs	r5, #0
 8002cb8:	4e0c      	ldr	r6, [pc, #48]	; (8002cec <__libc_init_array+0x38>)
 8002cba:	4c0d      	ldr	r4, [pc, #52]	; (8002cf0 <__libc_init_array+0x3c>)
 8002cbc:	1ba4      	subs	r4, r4, r6
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	42a5      	cmp	r5, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	f000 ff74 	bl	8003bb0 <_init>
 8002cc8:	2500      	movs	r5, #0
 8002cca:	4e0a      	ldr	r6, [pc, #40]	; (8002cf4 <__libc_init_array+0x40>)
 8002ccc:	4c0a      	ldr	r4, [pc, #40]	; (8002cf8 <__libc_init_array+0x44>)
 8002cce:	1ba4      	subs	r4, r4, r6
 8002cd0:	10a4      	asrs	r4, r4, #2
 8002cd2:	42a5      	cmp	r5, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cdc:	4798      	blx	r3
 8002cde:	3501      	adds	r5, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ce6:	4798      	blx	r3
 8002ce8:	3501      	adds	r5, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08003d3c 	.word	0x08003d3c
 8002cf0:	08003d3c 	.word	0x08003d3c
 8002cf4:	08003d3c 	.word	0x08003d3c
 8002cf8:	08003d40 	.word	0x08003d40

08002cfc <memset>:
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4402      	add	r2, r0
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d100      	bne.n	8002d06 <memset+0xa>
 8002d04:	4770      	bx	lr
 8002d06:	f803 1b01 	strb.w	r1, [r3], #1
 8002d0a:	e7f9      	b.n	8002d00 <memset+0x4>

08002d0c <iprintf>:
 8002d0c:	b40f      	push	{r0, r1, r2, r3}
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <iprintf+0x2c>)
 8002d10:	b513      	push	{r0, r1, r4, lr}
 8002d12:	681c      	ldr	r4, [r3, #0]
 8002d14:	b124      	cbz	r4, 8002d20 <iprintf+0x14>
 8002d16:	69a3      	ldr	r3, [r4, #24]
 8002d18:	b913      	cbnz	r3, 8002d20 <iprintf+0x14>
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f000 fa22 	bl	8003164 <__sinit>
 8002d20:	ab05      	add	r3, sp, #20
 8002d22:	9a04      	ldr	r2, [sp, #16]
 8002d24:	68a1      	ldr	r1, [r4, #8]
 8002d26:	4620      	mov	r0, r4
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	f000 fbd7 	bl	80034dc <_vfiprintf_r>
 8002d2e:	b002      	add	sp, #8
 8002d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d34:	b004      	add	sp, #16
 8002d36:	4770      	bx	lr
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <_puts_r>:
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	460e      	mov	r6, r1
 8002d40:	4605      	mov	r5, r0
 8002d42:	b118      	cbz	r0, 8002d4c <_puts_r+0x10>
 8002d44:	6983      	ldr	r3, [r0, #24]
 8002d46:	b90b      	cbnz	r3, 8002d4c <_puts_r+0x10>
 8002d48:	f000 fa0c 	bl	8003164 <__sinit>
 8002d4c:	69ab      	ldr	r3, [r5, #24]
 8002d4e:	68ac      	ldr	r4, [r5, #8]
 8002d50:	b913      	cbnz	r3, 8002d58 <_puts_r+0x1c>
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 fa06 	bl	8003164 <__sinit>
 8002d58:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <_puts_r+0xac>)
 8002d5a:	429c      	cmp	r4, r3
 8002d5c:	d117      	bne.n	8002d8e <_puts_r+0x52>
 8002d5e:	686c      	ldr	r4, [r5, #4]
 8002d60:	89a3      	ldrh	r3, [r4, #12]
 8002d62:	071b      	lsls	r3, r3, #28
 8002d64:	d51d      	bpl.n	8002da2 <_puts_r+0x66>
 8002d66:	6923      	ldr	r3, [r4, #16]
 8002d68:	b1db      	cbz	r3, 8002da2 <_puts_r+0x66>
 8002d6a:	3e01      	subs	r6, #1
 8002d6c:	68a3      	ldr	r3, [r4, #8]
 8002d6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d72:	3b01      	subs	r3, #1
 8002d74:	60a3      	str	r3, [r4, #8]
 8002d76:	b9e9      	cbnz	r1, 8002db4 <_puts_r+0x78>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da2e      	bge.n	8002dda <_puts_r+0x9e>
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	210a      	movs	r1, #10
 8002d80:	4628      	mov	r0, r5
 8002d82:	f000 f83f 	bl	8002e04 <__swbuf_r>
 8002d86:	3001      	adds	r0, #1
 8002d88:	d011      	beq.n	8002dae <_puts_r+0x72>
 8002d8a:	200a      	movs	r0, #10
 8002d8c:	e011      	b.n	8002db2 <_puts_r+0x76>
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <_puts_r+0xb0>)
 8002d90:	429c      	cmp	r4, r3
 8002d92:	d101      	bne.n	8002d98 <_puts_r+0x5c>
 8002d94:	68ac      	ldr	r4, [r5, #8]
 8002d96:	e7e3      	b.n	8002d60 <_puts_r+0x24>
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <_puts_r+0xb4>)
 8002d9a:	429c      	cmp	r4, r3
 8002d9c:	bf08      	it	eq
 8002d9e:	68ec      	ldreq	r4, [r5, #12]
 8002da0:	e7de      	b.n	8002d60 <_puts_r+0x24>
 8002da2:	4621      	mov	r1, r4
 8002da4:	4628      	mov	r0, r5
 8002da6:	f000 f87f 	bl	8002ea8 <__swsetup_r>
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d0dd      	beq.n	8002d6a <_puts_r+0x2e>
 8002dae:	f04f 30ff 	mov.w	r0, #4294967295
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da04      	bge.n	8002dc2 <_puts_r+0x86>
 8002db8:	69a2      	ldr	r2, [r4, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	dc06      	bgt.n	8002dcc <_puts_r+0x90>
 8002dbe:	290a      	cmp	r1, #10
 8002dc0:	d004      	beq.n	8002dcc <_puts_r+0x90>
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	6022      	str	r2, [r4, #0]
 8002dc8:	7019      	strb	r1, [r3, #0]
 8002dca:	e7cf      	b.n	8002d6c <_puts_r+0x30>
 8002dcc:	4622      	mov	r2, r4
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f000 f818 	bl	8002e04 <__swbuf_r>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d1c9      	bne.n	8002d6c <_puts_r+0x30>
 8002dd8:	e7e9      	b.n	8002dae <_puts_r+0x72>
 8002dda:	200a      	movs	r0, #10
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	6022      	str	r2, [r4, #0]
 8002de2:	7018      	strb	r0, [r3, #0]
 8002de4:	e7e5      	b.n	8002db2 <_puts_r+0x76>
 8002de6:	bf00      	nop
 8002de8:	08003cc8 	.word	0x08003cc8
 8002dec:	08003ce8 	.word	0x08003ce8
 8002df0:	08003ca8 	.word	0x08003ca8

08002df4 <puts>:
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <puts+0xc>)
 8002df6:	4601      	mov	r1, r0
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f7ff bf9f 	b.w	8002d3c <_puts_r>
 8002dfe:	bf00      	nop
 8002e00:	2000000c 	.word	0x2000000c

08002e04 <__swbuf_r>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	460e      	mov	r6, r1
 8002e08:	4614      	mov	r4, r2
 8002e0a:	4605      	mov	r5, r0
 8002e0c:	b118      	cbz	r0, 8002e16 <__swbuf_r+0x12>
 8002e0e:	6983      	ldr	r3, [r0, #24]
 8002e10:	b90b      	cbnz	r3, 8002e16 <__swbuf_r+0x12>
 8002e12:	f000 f9a7 	bl	8003164 <__sinit>
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <__swbuf_r+0x98>)
 8002e18:	429c      	cmp	r4, r3
 8002e1a:	d12a      	bne.n	8002e72 <__swbuf_r+0x6e>
 8002e1c:	686c      	ldr	r4, [r5, #4]
 8002e1e:	69a3      	ldr	r3, [r4, #24]
 8002e20:	60a3      	str	r3, [r4, #8]
 8002e22:	89a3      	ldrh	r3, [r4, #12]
 8002e24:	071a      	lsls	r2, r3, #28
 8002e26:	d52e      	bpl.n	8002e86 <__swbuf_r+0x82>
 8002e28:	6923      	ldr	r3, [r4, #16]
 8002e2a:	b363      	cbz	r3, 8002e86 <__swbuf_r+0x82>
 8002e2c:	6923      	ldr	r3, [r4, #16]
 8002e2e:	6820      	ldr	r0, [r4, #0]
 8002e30:	b2f6      	uxtb	r6, r6
 8002e32:	1ac0      	subs	r0, r0, r3
 8002e34:	6963      	ldr	r3, [r4, #20]
 8002e36:	4637      	mov	r7, r6
 8002e38:	4283      	cmp	r3, r0
 8002e3a:	dc04      	bgt.n	8002e46 <__swbuf_r+0x42>
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f000 f926 	bl	8003090 <_fflush_r>
 8002e44:	bb28      	cbnz	r0, 8002e92 <__swbuf_r+0x8e>
 8002e46:	68a3      	ldr	r3, [r4, #8]
 8002e48:	3001      	adds	r0, #1
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	60a3      	str	r3, [r4, #8]
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	6022      	str	r2, [r4, #0]
 8002e54:	701e      	strb	r6, [r3, #0]
 8002e56:	6963      	ldr	r3, [r4, #20]
 8002e58:	4283      	cmp	r3, r0
 8002e5a:	d004      	beq.n	8002e66 <__swbuf_r+0x62>
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	07db      	lsls	r3, r3, #31
 8002e60:	d519      	bpl.n	8002e96 <__swbuf_r+0x92>
 8002e62:	2e0a      	cmp	r6, #10
 8002e64:	d117      	bne.n	8002e96 <__swbuf_r+0x92>
 8002e66:	4621      	mov	r1, r4
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 f911 	bl	8003090 <_fflush_r>
 8002e6e:	b190      	cbz	r0, 8002e96 <__swbuf_r+0x92>
 8002e70:	e00f      	b.n	8002e92 <__swbuf_r+0x8e>
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <__swbuf_r+0x9c>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d101      	bne.n	8002e7c <__swbuf_r+0x78>
 8002e78:	68ac      	ldr	r4, [r5, #8]
 8002e7a:	e7d0      	b.n	8002e1e <__swbuf_r+0x1a>
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <__swbuf_r+0xa0>)
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	bf08      	it	eq
 8002e82:	68ec      	ldreq	r4, [r5, #12]
 8002e84:	e7cb      	b.n	8002e1e <__swbuf_r+0x1a>
 8002e86:	4621      	mov	r1, r4
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f000 f80d 	bl	8002ea8 <__swsetup_r>
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d0cc      	beq.n	8002e2c <__swbuf_r+0x28>
 8002e92:	f04f 37ff 	mov.w	r7, #4294967295
 8002e96:	4638      	mov	r0, r7
 8002e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	08003cc8 	.word	0x08003cc8
 8002ea0:	08003ce8 	.word	0x08003ce8
 8002ea4:	08003ca8 	.word	0x08003ca8

08002ea8 <__swsetup_r>:
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <__swsetup_r+0xcc>)
 8002eaa:	b570      	push	{r4, r5, r6, lr}
 8002eac:	681d      	ldr	r5, [r3, #0]
 8002eae:	4606      	mov	r6, r0
 8002eb0:	460c      	mov	r4, r1
 8002eb2:	b125      	cbz	r5, 8002ebe <__swsetup_r+0x16>
 8002eb4:	69ab      	ldr	r3, [r5, #24]
 8002eb6:	b913      	cbnz	r3, 8002ebe <__swsetup_r+0x16>
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f000 f953 	bl	8003164 <__sinit>
 8002ebe:	4b2e      	ldr	r3, [pc, #184]	; (8002f78 <__swsetup_r+0xd0>)
 8002ec0:	429c      	cmp	r4, r3
 8002ec2:	d10f      	bne.n	8002ee4 <__swsetup_r+0x3c>
 8002ec4:	686c      	ldr	r4, [r5, #4]
 8002ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	0715      	lsls	r5, r2, #28
 8002ece:	d42c      	bmi.n	8002f2a <__swsetup_r+0x82>
 8002ed0:	06d0      	lsls	r0, r2, #27
 8002ed2:	d411      	bmi.n	8002ef8 <__swsetup_r+0x50>
 8002ed4:	2209      	movs	r2, #9
 8002ed6:	6032      	str	r2, [r6, #0]
 8002ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002edc:	81a3      	strh	r3, [r4, #12]
 8002ede:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee2:	e03e      	b.n	8002f62 <__swsetup_r+0xba>
 8002ee4:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <__swsetup_r+0xd4>)
 8002ee6:	429c      	cmp	r4, r3
 8002ee8:	d101      	bne.n	8002eee <__swsetup_r+0x46>
 8002eea:	68ac      	ldr	r4, [r5, #8]
 8002eec:	e7eb      	b.n	8002ec6 <__swsetup_r+0x1e>
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <__swsetup_r+0xd8>)
 8002ef0:	429c      	cmp	r4, r3
 8002ef2:	bf08      	it	eq
 8002ef4:	68ec      	ldreq	r4, [r5, #12]
 8002ef6:	e7e6      	b.n	8002ec6 <__swsetup_r+0x1e>
 8002ef8:	0751      	lsls	r1, r2, #29
 8002efa:	d512      	bpl.n	8002f22 <__swsetup_r+0x7a>
 8002efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002efe:	b141      	cbz	r1, 8002f12 <__swsetup_r+0x6a>
 8002f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f04:	4299      	cmp	r1, r3
 8002f06:	d002      	beq.n	8002f0e <__swsetup_r+0x66>
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f000 fa19 	bl	8003340 <_free_r>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6363      	str	r3, [r4, #52]	; 0x34
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f18:	81a3      	strh	r3, [r4, #12]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	b94b      	cbnz	r3, 8002f42 <__swsetup_r+0x9a>
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f38:	d003      	beq.n	8002f42 <__swsetup_r+0x9a>
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f000 f9bf 	bl	80032c0 <__smakebuf_r>
 8002f42:	89a2      	ldrh	r2, [r4, #12]
 8002f44:	f012 0301 	ands.w	r3, r2, #1
 8002f48:	d00c      	beq.n	8002f64 <__swsetup_r+0xbc>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60a3      	str	r3, [r4, #8]
 8002f4e:	6963      	ldr	r3, [r4, #20]
 8002f50:	425b      	negs	r3, r3
 8002f52:	61a3      	str	r3, [r4, #24]
 8002f54:	6923      	ldr	r3, [r4, #16]
 8002f56:	b953      	cbnz	r3, 8002f6e <__swsetup_r+0xc6>
 8002f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f60:	d1ba      	bne.n	8002ed8 <__swsetup_r+0x30>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	0792      	lsls	r2, r2, #30
 8002f66:	bf58      	it	pl
 8002f68:	6963      	ldrpl	r3, [r4, #20]
 8002f6a:	60a3      	str	r3, [r4, #8]
 8002f6c:	e7f2      	b.n	8002f54 <__swsetup_r+0xac>
 8002f6e:	2000      	movs	r0, #0
 8002f70:	e7f7      	b.n	8002f62 <__swsetup_r+0xba>
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	08003cc8 	.word	0x08003cc8
 8002f7c:	08003ce8 	.word	0x08003ce8
 8002f80:	08003ca8 	.word	0x08003ca8

08002f84 <__sflush_r>:
 8002f84:	898a      	ldrh	r2, [r1, #12]
 8002f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8a:	4605      	mov	r5, r0
 8002f8c:	0710      	lsls	r0, r2, #28
 8002f8e:	460c      	mov	r4, r1
 8002f90:	d458      	bmi.n	8003044 <__sflush_r+0xc0>
 8002f92:	684b      	ldr	r3, [r1, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	dc05      	bgt.n	8002fa4 <__sflush_r+0x20>
 8002f98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	dc02      	bgt.n	8002fa4 <__sflush_r+0x20>
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	d0f9      	beq.n	8002f9e <__sflush_r+0x1a>
 8002faa:	2300      	movs	r3, #0
 8002fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fb0:	682f      	ldr	r7, [r5, #0]
 8002fb2:	6a21      	ldr	r1, [r4, #32]
 8002fb4:	602b      	str	r3, [r5, #0]
 8002fb6:	d032      	beq.n	800301e <__sflush_r+0x9a>
 8002fb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	075a      	lsls	r2, r3, #29
 8002fbe:	d505      	bpl.n	8002fcc <__sflush_r+0x48>
 8002fc0:	6863      	ldr	r3, [r4, #4]
 8002fc2:	1ac0      	subs	r0, r0, r3
 8002fc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fc6:	b10b      	cbz	r3, 8002fcc <__sflush_r+0x48>
 8002fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fca:	1ac0      	subs	r0, r0, r3
 8002fcc:	2300      	movs	r3, #0
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fd2:	6a21      	ldr	r1, [r4, #32]
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b0      	blx	r6
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	d106      	bne.n	8002fec <__sflush_r+0x68>
 8002fde:	6829      	ldr	r1, [r5, #0]
 8002fe0:	291d      	cmp	r1, #29
 8002fe2:	d848      	bhi.n	8003076 <__sflush_r+0xf2>
 8002fe4:	4a29      	ldr	r2, [pc, #164]	; (800308c <__sflush_r+0x108>)
 8002fe6:	40ca      	lsrs	r2, r1
 8002fe8:	07d6      	lsls	r6, r2, #31
 8002fea:	d544      	bpl.n	8003076 <__sflush_r+0xf2>
 8002fec:	2200      	movs	r2, #0
 8002fee:	6062      	str	r2, [r4, #4]
 8002ff0:	6922      	ldr	r2, [r4, #16]
 8002ff2:	04d9      	lsls	r1, r3, #19
 8002ff4:	6022      	str	r2, [r4, #0]
 8002ff6:	d504      	bpl.n	8003002 <__sflush_r+0x7e>
 8002ff8:	1c42      	adds	r2, r0, #1
 8002ffa:	d101      	bne.n	8003000 <__sflush_r+0x7c>
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	b903      	cbnz	r3, 8003002 <__sflush_r+0x7e>
 8003000:	6560      	str	r0, [r4, #84]	; 0x54
 8003002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003004:	602f      	str	r7, [r5, #0]
 8003006:	2900      	cmp	r1, #0
 8003008:	d0c9      	beq.n	8002f9e <__sflush_r+0x1a>
 800300a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800300e:	4299      	cmp	r1, r3
 8003010:	d002      	beq.n	8003018 <__sflush_r+0x94>
 8003012:	4628      	mov	r0, r5
 8003014:	f000 f994 	bl	8003340 <_free_r>
 8003018:	2000      	movs	r0, #0
 800301a:	6360      	str	r0, [r4, #52]	; 0x34
 800301c:	e7c0      	b.n	8002fa0 <__sflush_r+0x1c>
 800301e:	2301      	movs	r3, #1
 8003020:	4628      	mov	r0, r5
 8003022:	47b0      	blx	r6
 8003024:	1c41      	adds	r1, r0, #1
 8003026:	d1c8      	bne.n	8002fba <__sflush_r+0x36>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0c5      	beq.n	8002fba <__sflush_r+0x36>
 800302e:	2b1d      	cmp	r3, #29
 8003030:	d001      	beq.n	8003036 <__sflush_r+0xb2>
 8003032:	2b16      	cmp	r3, #22
 8003034:	d101      	bne.n	800303a <__sflush_r+0xb6>
 8003036:	602f      	str	r7, [r5, #0]
 8003038:	e7b1      	b.n	8002f9e <__sflush_r+0x1a>
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003040:	81a3      	strh	r3, [r4, #12]
 8003042:	e7ad      	b.n	8002fa0 <__sflush_r+0x1c>
 8003044:	690f      	ldr	r7, [r1, #16]
 8003046:	2f00      	cmp	r7, #0
 8003048:	d0a9      	beq.n	8002f9e <__sflush_r+0x1a>
 800304a:	0793      	lsls	r3, r2, #30
 800304c:	bf18      	it	ne
 800304e:	2300      	movne	r3, #0
 8003050:	680e      	ldr	r6, [r1, #0]
 8003052:	bf08      	it	eq
 8003054:	694b      	ldreq	r3, [r1, #20]
 8003056:	eba6 0807 	sub.w	r8, r6, r7
 800305a:	600f      	str	r7, [r1, #0]
 800305c:	608b      	str	r3, [r1, #8]
 800305e:	f1b8 0f00 	cmp.w	r8, #0
 8003062:	dd9c      	ble.n	8002f9e <__sflush_r+0x1a>
 8003064:	4643      	mov	r3, r8
 8003066:	463a      	mov	r2, r7
 8003068:	6a21      	ldr	r1, [r4, #32]
 800306a:	4628      	mov	r0, r5
 800306c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800306e:	47b0      	blx	r6
 8003070:	2800      	cmp	r0, #0
 8003072:	dc06      	bgt.n	8003082 <__sflush_r+0xfe>
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	e78e      	b.n	8002fa0 <__sflush_r+0x1c>
 8003082:	4407      	add	r7, r0
 8003084:	eba8 0800 	sub.w	r8, r8, r0
 8003088:	e7e9      	b.n	800305e <__sflush_r+0xda>
 800308a:	bf00      	nop
 800308c:	20400001 	.word	0x20400001

08003090 <_fflush_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	690b      	ldr	r3, [r1, #16]
 8003094:	4605      	mov	r5, r0
 8003096:	460c      	mov	r4, r1
 8003098:	b1db      	cbz	r3, 80030d2 <_fflush_r+0x42>
 800309a:	b118      	cbz	r0, 80030a4 <_fflush_r+0x14>
 800309c:	6983      	ldr	r3, [r0, #24]
 800309e:	b90b      	cbnz	r3, 80030a4 <_fflush_r+0x14>
 80030a0:	f000 f860 	bl	8003164 <__sinit>
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <_fflush_r+0x48>)
 80030a6:	429c      	cmp	r4, r3
 80030a8:	d109      	bne.n	80030be <_fflush_r+0x2e>
 80030aa:	686c      	ldr	r4, [r5, #4]
 80030ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030b0:	b17b      	cbz	r3, 80030d2 <_fflush_r+0x42>
 80030b2:	4621      	mov	r1, r4
 80030b4:	4628      	mov	r0, r5
 80030b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030ba:	f7ff bf63 	b.w	8002f84 <__sflush_r>
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <_fflush_r+0x4c>)
 80030c0:	429c      	cmp	r4, r3
 80030c2:	d101      	bne.n	80030c8 <_fflush_r+0x38>
 80030c4:	68ac      	ldr	r4, [r5, #8]
 80030c6:	e7f1      	b.n	80030ac <_fflush_r+0x1c>
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <_fflush_r+0x50>)
 80030ca:	429c      	cmp	r4, r3
 80030cc:	bf08      	it	eq
 80030ce:	68ec      	ldreq	r4, [r5, #12]
 80030d0:	e7ec      	b.n	80030ac <_fflush_r+0x1c>
 80030d2:	2000      	movs	r0, #0
 80030d4:	bd38      	pop	{r3, r4, r5, pc}
 80030d6:	bf00      	nop
 80030d8:	08003cc8 	.word	0x08003cc8
 80030dc:	08003ce8 	.word	0x08003ce8
 80030e0:	08003ca8 	.word	0x08003ca8

080030e4 <std>:
 80030e4:	2300      	movs	r3, #0
 80030e6:	b510      	push	{r4, lr}
 80030e8:	4604      	mov	r4, r0
 80030ea:	e9c0 3300 	strd	r3, r3, [r0]
 80030ee:	6083      	str	r3, [r0, #8]
 80030f0:	8181      	strh	r1, [r0, #12]
 80030f2:	6643      	str	r3, [r0, #100]	; 0x64
 80030f4:	81c2      	strh	r2, [r0, #14]
 80030f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030fa:	6183      	str	r3, [r0, #24]
 80030fc:	4619      	mov	r1, r3
 80030fe:	2208      	movs	r2, #8
 8003100:	305c      	adds	r0, #92	; 0x5c
 8003102:	f7ff fdfb 	bl	8002cfc <memset>
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <std+0x38>)
 8003108:	6224      	str	r4, [r4, #32]
 800310a:	6263      	str	r3, [r4, #36]	; 0x24
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <std+0x3c>)
 800310e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <std+0x40>)
 8003112:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <std+0x44>)
 8003116:	6323      	str	r3, [r4, #48]	; 0x30
 8003118:	bd10      	pop	{r4, pc}
 800311a:	bf00      	nop
 800311c:	08003a39 	.word	0x08003a39
 8003120:	08003a5b 	.word	0x08003a5b
 8003124:	08003a93 	.word	0x08003a93
 8003128:	08003ab7 	.word	0x08003ab7

0800312c <_cleanup_r>:
 800312c:	4901      	ldr	r1, [pc, #4]	; (8003134 <_cleanup_r+0x8>)
 800312e:	f000 b885 	b.w	800323c <_fwalk_reent>
 8003132:	bf00      	nop
 8003134:	08003091 	.word	0x08003091

08003138 <__sfmoreglue>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	2568      	movs	r5, #104	; 0x68
 800313c:	1e4a      	subs	r2, r1, #1
 800313e:	4355      	muls	r5, r2
 8003140:	460e      	mov	r6, r1
 8003142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003146:	f000 f947 	bl	80033d8 <_malloc_r>
 800314a:	4604      	mov	r4, r0
 800314c:	b140      	cbz	r0, 8003160 <__sfmoreglue+0x28>
 800314e:	2100      	movs	r1, #0
 8003150:	e9c0 1600 	strd	r1, r6, [r0]
 8003154:	300c      	adds	r0, #12
 8003156:	60a0      	str	r0, [r4, #8]
 8003158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800315c:	f7ff fdce 	bl	8002cfc <memset>
 8003160:	4620      	mov	r0, r4
 8003162:	bd70      	pop	{r4, r5, r6, pc}

08003164 <__sinit>:
 8003164:	6983      	ldr	r3, [r0, #24]
 8003166:	b510      	push	{r4, lr}
 8003168:	4604      	mov	r4, r0
 800316a:	bb33      	cbnz	r3, 80031ba <__sinit+0x56>
 800316c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003170:	6503      	str	r3, [r0, #80]	; 0x50
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <__sinit+0x58>)
 8003174:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <__sinit+0x5c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6282      	str	r2, [r0, #40]	; 0x28
 800317a:	4298      	cmp	r0, r3
 800317c:	bf04      	itt	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	6183      	streq	r3, [r0, #24]
 8003182:	f000 f81f 	bl	80031c4 <__sfp>
 8003186:	6060      	str	r0, [r4, #4]
 8003188:	4620      	mov	r0, r4
 800318a:	f000 f81b 	bl	80031c4 <__sfp>
 800318e:	60a0      	str	r0, [r4, #8]
 8003190:	4620      	mov	r0, r4
 8003192:	f000 f817 	bl	80031c4 <__sfp>
 8003196:	2200      	movs	r2, #0
 8003198:	60e0      	str	r0, [r4, #12]
 800319a:	2104      	movs	r1, #4
 800319c:	6860      	ldr	r0, [r4, #4]
 800319e:	f7ff ffa1 	bl	80030e4 <std>
 80031a2:	2201      	movs	r2, #1
 80031a4:	2109      	movs	r1, #9
 80031a6:	68a0      	ldr	r0, [r4, #8]
 80031a8:	f7ff ff9c 	bl	80030e4 <std>
 80031ac:	2202      	movs	r2, #2
 80031ae:	2112      	movs	r1, #18
 80031b0:	68e0      	ldr	r0, [r4, #12]
 80031b2:	f7ff ff97 	bl	80030e4 <std>
 80031b6:	2301      	movs	r3, #1
 80031b8:	61a3      	str	r3, [r4, #24]
 80031ba:	bd10      	pop	{r4, pc}
 80031bc:	08003ca4 	.word	0x08003ca4
 80031c0:	0800312d 	.word	0x0800312d

080031c4 <__sfp>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <__sfp+0x70>)
 80031c8:	4607      	mov	r7, r0
 80031ca:	681e      	ldr	r6, [r3, #0]
 80031cc:	69b3      	ldr	r3, [r6, #24]
 80031ce:	b913      	cbnz	r3, 80031d6 <__sfp+0x12>
 80031d0:	4630      	mov	r0, r6
 80031d2:	f7ff ffc7 	bl	8003164 <__sinit>
 80031d6:	3648      	adds	r6, #72	; 0x48
 80031d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031dc:	3b01      	subs	r3, #1
 80031de:	d503      	bpl.n	80031e8 <__sfp+0x24>
 80031e0:	6833      	ldr	r3, [r6, #0]
 80031e2:	b133      	cbz	r3, 80031f2 <__sfp+0x2e>
 80031e4:	6836      	ldr	r6, [r6, #0]
 80031e6:	e7f7      	b.n	80031d8 <__sfp+0x14>
 80031e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031ec:	b16d      	cbz	r5, 800320a <__sfp+0x46>
 80031ee:	3468      	adds	r4, #104	; 0x68
 80031f0:	e7f4      	b.n	80031dc <__sfp+0x18>
 80031f2:	2104      	movs	r1, #4
 80031f4:	4638      	mov	r0, r7
 80031f6:	f7ff ff9f 	bl	8003138 <__sfmoreglue>
 80031fa:	6030      	str	r0, [r6, #0]
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d1f1      	bne.n	80031e4 <__sfp+0x20>
 8003200:	230c      	movs	r3, #12
 8003202:	4604      	mov	r4, r0
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4620      	mov	r0, r4
 8003208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <__sfp+0x74>)
 800320c:	6665      	str	r5, [r4, #100]	; 0x64
 800320e:	e9c4 5500 	strd	r5, r5, [r4]
 8003212:	60a5      	str	r5, [r4, #8]
 8003214:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003218:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800321c:	2208      	movs	r2, #8
 800321e:	4629      	mov	r1, r5
 8003220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003224:	f7ff fd6a 	bl	8002cfc <memset>
 8003228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800322c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003230:	e7e9      	b.n	8003206 <__sfp+0x42>
 8003232:	bf00      	nop
 8003234:	08003ca4 	.word	0x08003ca4
 8003238:	ffff0001 	.word	0xffff0001

0800323c <_fwalk_reent>:
 800323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003240:	4680      	mov	r8, r0
 8003242:	4689      	mov	r9, r1
 8003244:	2600      	movs	r6, #0
 8003246:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800324a:	b914      	cbnz	r4, 8003252 <_fwalk_reent+0x16>
 800324c:	4630      	mov	r0, r6
 800324e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003252:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003256:	3f01      	subs	r7, #1
 8003258:	d501      	bpl.n	800325e <_fwalk_reent+0x22>
 800325a:	6824      	ldr	r4, [r4, #0]
 800325c:	e7f5      	b.n	800324a <_fwalk_reent+0xe>
 800325e:	89ab      	ldrh	r3, [r5, #12]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d907      	bls.n	8003274 <_fwalk_reent+0x38>
 8003264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003268:	3301      	adds	r3, #1
 800326a:	d003      	beq.n	8003274 <_fwalk_reent+0x38>
 800326c:	4629      	mov	r1, r5
 800326e:	4640      	mov	r0, r8
 8003270:	47c8      	blx	r9
 8003272:	4306      	orrs	r6, r0
 8003274:	3568      	adds	r5, #104	; 0x68
 8003276:	e7ee      	b.n	8003256 <_fwalk_reent+0x1a>

08003278 <__swhatbuf_r>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	460e      	mov	r6, r1
 800327c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003280:	b096      	sub	sp, #88	; 0x58
 8003282:	2900      	cmp	r1, #0
 8003284:	4614      	mov	r4, r2
 8003286:	461d      	mov	r5, r3
 8003288:	da07      	bge.n	800329a <__swhatbuf_r+0x22>
 800328a:	2300      	movs	r3, #0
 800328c:	602b      	str	r3, [r5, #0]
 800328e:	89b3      	ldrh	r3, [r6, #12]
 8003290:	061a      	lsls	r2, r3, #24
 8003292:	d410      	bmi.n	80032b6 <__swhatbuf_r+0x3e>
 8003294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003298:	e00e      	b.n	80032b8 <__swhatbuf_r+0x40>
 800329a:	466a      	mov	r2, sp
 800329c:	f000 fc32 	bl	8003b04 <_fstat_r>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	dbf2      	blt.n	800328a <__swhatbuf_r+0x12>
 80032a4:	9a01      	ldr	r2, [sp, #4]
 80032a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032ae:	425a      	negs	r2, r3
 80032b0:	415a      	adcs	r2, r3
 80032b2:	602a      	str	r2, [r5, #0]
 80032b4:	e7ee      	b.n	8003294 <__swhatbuf_r+0x1c>
 80032b6:	2340      	movs	r3, #64	; 0x40
 80032b8:	2000      	movs	r0, #0
 80032ba:	6023      	str	r3, [r4, #0]
 80032bc:	b016      	add	sp, #88	; 0x58
 80032be:	bd70      	pop	{r4, r5, r6, pc}

080032c0 <__smakebuf_r>:
 80032c0:	898b      	ldrh	r3, [r1, #12]
 80032c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032c4:	079d      	lsls	r5, r3, #30
 80032c6:	4606      	mov	r6, r0
 80032c8:	460c      	mov	r4, r1
 80032ca:	d507      	bpl.n	80032dc <__smakebuf_r+0x1c>
 80032cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	6123      	str	r3, [r4, #16]
 80032d4:	2301      	movs	r3, #1
 80032d6:	6163      	str	r3, [r4, #20]
 80032d8:	b002      	add	sp, #8
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	ab01      	add	r3, sp, #4
 80032de:	466a      	mov	r2, sp
 80032e0:	f7ff ffca 	bl	8003278 <__swhatbuf_r>
 80032e4:	9900      	ldr	r1, [sp, #0]
 80032e6:	4605      	mov	r5, r0
 80032e8:	4630      	mov	r0, r6
 80032ea:	f000 f875 	bl	80033d8 <_malloc_r>
 80032ee:	b948      	cbnz	r0, 8003304 <__smakebuf_r+0x44>
 80032f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f4:	059a      	lsls	r2, r3, #22
 80032f6:	d4ef      	bmi.n	80032d8 <__smakebuf_r+0x18>
 80032f8:	f023 0303 	bic.w	r3, r3, #3
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	81a3      	strh	r3, [r4, #12]
 8003302:	e7e3      	b.n	80032cc <__smakebuf_r+0xc>
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <__smakebuf_r+0x7c>)
 8003306:	62b3      	str	r3, [r6, #40]	; 0x28
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	6020      	str	r0, [r4, #0]
 800330c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003310:	81a3      	strh	r3, [r4, #12]
 8003312:	9b00      	ldr	r3, [sp, #0]
 8003314:	6120      	str	r0, [r4, #16]
 8003316:	6163      	str	r3, [r4, #20]
 8003318:	9b01      	ldr	r3, [sp, #4]
 800331a:	b15b      	cbz	r3, 8003334 <__smakebuf_r+0x74>
 800331c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003320:	4630      	mov	r0, r6
 8003322:	f000 fc01 	bl	8003b28 <_isatty_r>
 8003326:	b128      	cbz	r0, 8003334 <__smakebuf_r+0x74>
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	81a3      	strh	r3, [r4, #12]
 8003334:	89a3      	ldrh	r3, [r4, #12]
 8003336:	431d      	orrs	r5, r3
 8003338:	81a5      	strh	r5, [r4, #12]
 800333a:	e7cd      	b.n	80032d8 <__smakebuf_r+0x18>
 800333c:	0800312d 	.word	0x0800312d

08003340 <_free_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4605      	mov	r5, r0
 8003344:	2900      	cmp	r1, #0
 8003346:	d043      	beq.n	80033d0 <_free_r+0x90>
 8003348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800334c:	1f0c      	subs	r4, r1, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	bfb8      	it	lt
 8003352:	18e4      	addlt	r4, r4, r3
 8003354:	f000 fc18 	bl	8003b88 <__malloc_lock>
 8003358:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <_free_r+0x94>)
 800335a:	6813      	ldr	r3, [r2, #0]
 800335c:	4610      	mov	r0, r2
 800335e:	b933      	cbnz	r3, 800336e <_free_r+0x2e>
 8003360:	6063      	str	r3, [r4, #4]
 8003362:	6014      	str	r4, [r2, #0]
 8003364:	4628      	mov	r0, r5
 8003366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800336a:	f000 bc0e 	b.w	8003b8a <__malloc_unlock>
 800336e:	42a3      	cmp	r3, r4
 8003370:	d90b      	bls.n	800338a <_free_r+0x4a>
 8003372:	6821      	ldr	r1, [r4, #0]
 8003374:	1862      	adds	r2, r4, r1
 8003376:	4293      	cmp	r3, r2
 8003378:	bf01      	itttt	eq
 800337a:	681a      	ldreq	r2, [r3, #0]
 800337c:	685b      	ldreq	r3, [r3, #4]
 800337e:	1852      	addeq	r2, r2, r1
 8003380:	6022      	streq	r2, [r4, #0]
 8003382:	6063      	str	r3, [r4, #4]
 8003384:	6004      	str	r4, [r0, #0]
 8003386:	e7ed      	b.n	8003364 <_free_r+0x24>
 8003388:	4613      	mov	r3, r2
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	b10a      	cbz	r2, 8003392 <_free_r+0x52>
 800338e:	42a2      	cmp	r2, r4
 8003390:	d9fa      	bls.n	8003388 <_free_r+0x48>
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	1858      	adds	r0, r3, r1
 8003396:	42a0      	cmp	r0, r4
 8003398:	d10b      	bne.n	80033b2 <_free_r+0x72>
 800339a:	6820      	ldr	r0, [r4, #0]
 800339c:	4401      	add	r1, r0
 800339e:	1858      	adds	r0, r3, r1
 80033a0:	4282      	cmp	r2, r0
 80033a2:	6019      	str	r1, [r3, #0]
 80033a4:	d1de      	bne.n	8003364 <_free_r+0x24>
 80033a6:	6810      	ldr	r0, [r2, #0]
 80033a8:	6852      	ldr	r2, [r2, #4]
 80033aa:	4401      	add	r1, r0
 80033ac:	6019      	str	r1, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	e7d8      	b.n	8003364 <_free_r+0x24>
 80033b2:	d902      	bls.n	80033ba <_free_r+0x7a>
 80033b4:	230c      	movs	r3, #12
 80033b6:	602b      	str	r3, [r5, #0]
 80033b8:	e7d4      	b.n	8003364 <_free_r+0x24>
 80033ba:	6820      	ldr	r0, [r4, #0]
 80033bc:	1821      	adds	r1, r4, r0
 80033be:	428a      	cmp	r2, r1
 80033c0:	bf01      	itttt	eq
 80033c2:	6811      	ldreq	r1, [r2, #0]
 80033c4:	6852      	ldreq	r2, [r2, #4]
 80033c6:	1809      	addeq	r1, r1, r0
 80033c8:	6021      	streq	r1, [r4, #0]
 80033ca:	6062      	str	r2, [r4, #4]
 80033cc:	605c      	str	r4, [r3, #4]
 80033ce:	e7c9      	b.n	8003364 <_free_r+0x24>
 80033d0:	bd38      	pop	{r3, r4, r5, pc}
 80033d2:	bf00      	nop
 80033d4:	20000090 	.word	0x20000090

080033d8 <_malloc_r>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	1ccd      	adds	r5, r1, #3
 80033dc:	f025 0503 	bic.w	r5, r5, #3
 80033e0:	3508      	adds	r5, #8
 80033e2:	2d0c      	cmp	r5, #12
 80033e4:	bf38      	it	cc
 80033e6:	250c      	movcc	r5, #12
 80033e8:	2d00      	cmp	r5, #0
 80033ea:	4606      	mov	r6, r0
 80033ec:	db01      	blt.n	80033f2 <_malloc_r+0x1a>
 80033ee:	42a9      	cmp	r1, r5
 80033f0:	d903      	bls.n	80033fa <_malloc_r+0x22>
 80033f2:	230c      	movs	r3, #12
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	2000      	movs	r0, #0
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
 80033fa:	f000 fbc5 	bl	8003b88 <__malloc_lock>
 80033fe:	4a21      	ldr	r2, [pc, #132]	; (8003484 <_malloc_r+0xac>)
 8003400:	6814      	ldr	r4, [r2, #0]
 8003402:	4621      	mov	r1, r4
 8003404:	b991      	cbnz	r1, 800342c <_malloc_r+0x54>
 8003406:	4c20      	ldr	r4, [pc, #128]	; (8003488 <_malloc_r+0xb0>)
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	b91b      	cbnz	r3, 8003414 <_malloc_r+0x3c>
 800340c:	4630      	mov	r0, r6
 800340e:	f000 fb03 	bl	8003a18 <_sbrk_r>
 8003412:	6020      	str	r0, [r4, #0]
 8003414:	4629      	mov	r1, r5
 8003416:	4630      	mov	r0, r6
 8003418:	f000 fafe 	bl	8003a18 <_sbrk_r>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d124      	bne.n	800346a <_malloc_r+0x92>
 8003420:	230c      	movs	r3, #12
 8003422:	4630      	mov	r0, r6
 8003424:	6033      	str	r3, [r6, #0]
 8003426:	f000 fbb0 	bl	8003b8a <__malloc_unlock>
 800342a:	e7e4      	b.n	80033f6 <_malloc_r+0x1e>
 800342c:	680b      	ldr	r3, [r1, #0]
 800342e:	1b5b      	subs	r3, r3, r5
 8003430:	d418      	bmi.n	8003464 <_malloc_r+0x8c>
 8003432:	2b0b      	cmp	r3, #11
 8003434:	d90f      	bls.n	8003456 <_malloc_r+0x7e>
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	18cc      	adds	r4, r1, r3
 800343a:	50cd      	str	r5, [r1, r3]
 800343c:	4630      	mov	r0, r6
 800343e:	f000 fba4 	bl	8003b8a <__malloc_unlock>
 8003442:	f104 000b 	add.w	r0, r4, #11
 8003446:	1d23      	adds	r3, r4, #4
 8003448:	f020 0007 	bic.w	r0, r0, #7
 800344c:	1ac3      	subs	r3, r0, r3
 800344e:	d0d3      	beq.n	80033f8 <_malloc_r+0x20>
 8003450:	425a      	negs	r2, r3
 8003452:	50e2      	str	r2, [r4, r3]
 8003454:	e7d0      	b.n	80033f8 <_malloc_r+0x20>
 8003456:	684b      	ldr	r3, [r1, #4]
 8003458:	428c      	cmp	r4, r1
 800345a:	bf16      	itet	ne
 800345c:	6063      	strne	r3, [r4, #4]
 800345e:	6013      	streq	r3, [r2, #0]
 8003460:	460c      	movne	r4, r1
 8003462:	e7eb      	b.n	800343c <_malloc_r+0x64>
 8003464:	460c      	mov	r4, r1
 8003466:	6849      	ldr	r1, [r1, #4]
 8003468:	e7cc      	b.n	8003404 <_malloc_r+0x2c>
 800346a:	1cc4      	adds	r4, r0, #3
 800346c:	f024 0403 	bic.w	r4, r4, #3
 8003470:	42a0      	cmp	r0, r4
 8003472:	d005      	beq.n	8003480 <_malloc_r+0xa8>
 8003474:	1a21      	subs	r1, r4, r0
 8003476:	4630      	mov	r0, r6
 8003478:	f000 face 	bl	8003a18 <_sbrk_r>
 800347c:	3001      	adds	r0, #1
 800347e:	d0cf      	beq.n	8003420 <_malloc_r+0x48>
 8003480:	6025      	str	r5, [r4, #0]
 8003482:	e7db      	b.n	800343c <_malloc_r+0x64>
 8003484:	20000090 	.word	0x20000090
 8003488:	20000094 	.word	0x20000094

0800348c <__sfputc_r>:
 800348c:	6893      	ldr	r3, [r2, #8]
 800348e:	b410      	push	{r4}
 8003490:	3b01      	subs	r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	6093      	str	r3, [r2, #8]
 8003496:	da07      	bge.n	80034a8 <__sfputc_r+0x1c>
 8003498:	6994      	ldr	r4, [r2, #24]
 800349a:	42a3      	cmp	r3, r4
 800349c:	db01      	blt.n	80034a2 <__sfputc_r+0x16>
 800349e:	290a      	cmp	r1, #10
 80034a0:	d102      	bne.n	80034a8 <__sfputc_r+0x1c>
 80034a2:	bc10      	pop	{r4}
 80034a4:	f7ff bcae 	b.w	8002e04 <__swbuf_r>
 80034a8:	6813      	ldr	r3, [r2, #0]
 80034aa:	1c58      	adds	r0, r3, #1
 80034ac:	6010      	str	r0, [r2, #0]
 80034ae:	7019      	strb	r1, [r3, #0]
 80034b0:	4608      	mov	r0, r1
 80034b2:	bc10      	pop	{r4}
 80034b4:	4770      	bx	lr

080034b6 <__sfputs_r>:
 80034b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b8:	4606      	mov	r6, r0
 80034ba:	460f      	mov	r7, r1
 80034bc:	4614      	mov	r4, r2
 80034be:	18d5      	adds	r5, r2, r3
 80034c0:	42ac      	cmp	r4, r5
 80034c2:	d101      	bne.n	80034c8 <__sfputs_r+0x12>
 80034c4:	2000      	movs	r0, #0
 80034c6:	e007      	b.n	80034d8 <__sfputs_r+0x22>
 80034c8:	463a      	mov	r2, r7
 80034ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ce:	4630      	mov	r0, r6
 80034d0:	f7ff ffdc 	bl	800348c <__sfputc_r>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d1f3      	bne.n	80034c0 <__sfputs_r+0xa>
 80034d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034dc <_vfiprintf_r>:
 80034dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e0:	460c      	mov	r4, r1
 80034e2:	b09d      	sub	sp, #116	; 0x74
 80034e4:	4617      	mov	r7, r2
 80034e6:	461d      	mov	r5, r3
 80034e8:	4606      	mov	r6, r0
 80034ea:	b118      	cbz	r0, 80034f4 <_vfiprintf_r+0x18>
 80034ec:	6983      	ldr	r3, [r0, #24]
 80034ee:	b90b      	cbnz	r3, 80034f4 <_vfiprintf_r+0x18>
 80034f0:	f7ff fe38 	bl	8003164 <__sinit>
 80034f4:	4b7c      	ldr	r3, [pc, #496]	; (80036e8 <_vfiprintf_r+0x20c>)
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d158      	bne.n	80035ac <_vfiprintf_r+0xd0>
 80034fa:	6874      	ldr	r4, [r6, #4]
 80034fc:	89a3      	ldrh	r3, [r4, #12]
 80034fe:	0718      	lsls	r0, r3, #28
 8003500:	d55e      	bpl.n	80035c0 <_vfiprintf_r+0xe4>
 8003502:	6923      	ldr	r3, [r4, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05b      	beq.n	80035c0 <_vfiprintf_r+0xe4>
 8003508:	2300      	movs	r3, #0
 800350a:	9309      	str	r3, [sp, #36]	; 0x24
 800350c:	2320      	movs	r3, #32
 800350e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003512:	2330      	movs	r3, #48	; 0x30
 8003514:	f04f 0b01 	mov.w	fp, #1
 8003518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800351c:	9503      	str	r5, [sp, #12]
 800351e:	46b8      	mov	r8, r7
 8003520:	4645      	mov	r5, r8
 8003522:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003526:	b10b      	cbz	r3, 800352c <_vfiprintf_r+0x50>
 8003528:	2b25      	cmp	r3, #37	; 0x25
 800352a:	d154      	bne.n	80035d6 <_vfiprintf_r+0xfa>
 800352c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003530:	d00b      	beq.n	800354a <_vfiprintf_r+0x6e>
 8003532:	4653      	mov	r3, sl
 8003534:	463a      	mov	r2, r7
 8003536:	4621      	mov	r1, r4
 8003538:	4630      	mov	r0, r6
 800353a:	f7ff ffbc 	bl	80034b6 <__sfputs_r>
 800353e:	3001      	adds	r0, #1
 8003540:	f000 80c2 	beq.w	80036c8 <_vfiprintf_r+0x1ec>
 8003544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003546:	4453      	add	r3, sl
 8003548:	9309      	str	r3, [sp, #36]	; 0x24
 800354a:	f898 3000 	ldrb.w	r3, [r8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80ba 	beq.w	80036c8 <_vfiprintf_r+0x1ec>
 8003554:	2300      	movs	r3, #0
 8003556:	f04f 32ff 	mov.w	r2, #4294967295
 800355a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800355e:	9304      	str	r3, [sp, #16]
 8003560:	9307      	str	r3, [sp, #28]
 8003562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003566:	931a      	str	r3, [sp, #104]	; 0x68
 8003568:	46a8      	mov	r8, r5
 800356a:	2205      	movs	r2, #5
 800356c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003570:	485e      	ldr	r0, [pc, #376]	; (80036ec <_vfiprintf_r+0x210>)
 8003572:	f000 fafb 	bl	8003b6c <memchr>
 8003576:	9b04      	ldr	r3, [sp, #16]
 8003578:	bb78      	cbnz	r0, 80035da <_vfiprintf_r+0xfe>
 800357a:	06d9      	lsls	r1, r3, #27
 800357c:	bf44      	itt	mi
 800357e:	2220      	movmi	r2, #32
 8003580:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003584:	071a      	lsls	r2, r3, #28
 8003586:	bf44      	itt	mi
 8003588:	222b      	movmi	r2, #43	; 0x2b
 800358a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800358e:	782a      	ldrb	r2, [r5, #0]
 8003590:	2a2a      	cmp	r2, #42	; 0x2a
 8003592:	d02a      	beq.n	80035ea <_vfiprintf_r+0x10e>
 8003594:	46a8      	mov	r8, r5
 8003596:	2000      	movs	r0, #0
 8003598:	250a      	movs	r5, #10
 800359a:	9a07      	ldr	r2, [sp, #28]
 800359c:	4641      	mov	r1, r8
 800359e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035a2:	3b30      	subs	r3, #48	; 0x30
 80035a4:	2b09      	cmp	r3, #9
 80035a6:	d969      	bls.n	800367c <_vfiprintf_r+0x1a0>
 80035a8:	b360      	cbz	r0, 8003604 <_vfiprintf_r+0x128>
 80035aa:	e024      	b.n	80035f6 <_vfiprintf_r+0x11a>
 80035ac:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <_vfiprintf_r+0x214>)
 80035ae:	429c      	cmp	r4, r3
 80035b0:	d101      	bne.n	80035b6 <_vfiprintf_r+0xda>
 80035b2:	68b4      	ldr	r4, [r6, #8]
 80035b4:	e7a2      	b.n	80034fc <_vfiprintf_r+0x20>
 80035b6:	4b4f      	ldr	r3, [pc, #316]	; (80036f4 <_vfiprintf_r+0x218>)
 80035b8:	429c      	cmp	r4, r3
 80035ba:	bf08      	it	eq
 80035bc:	68f4      	ldreq	r4, [r6, #12]
 80035be:	e79d      	b.n	80034fc <_vfiprintf_r+0x20>
 80035c0:	4621      	mov	r1, r4
 80035c2:	4630      	mov	r0, r6
 80035c4:	f7ff fc70 	bl	8002ea8 <__swsetup_r>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d09d      	beq.n	8003508 <_vfiprintf_r+0x2c>
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	b01d      	add	sp, #116	; 0x74
 80035d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d6:	46a8      	mov	r8, r5
 80035d8:	e7a2      	b.n	8003520 <_vfiprintf_r+0x44>
 80035da:	4a44      	ldr	r2, [pc, #272]	; (80036ec <_vfiprintf_r+0x210>)
 80035dc:	4645      	mov	r5, r8
 80035de:	1a80      	subs	r0, r0, r2
 80035e0:	fa0b f000 	lsl.w	r0, fp, r0
 80035e4:	4318      	orrs	r0, r3
 80035e6:	9004      	str	r0, [sp, #16]
 80035e8:	e7be      	b.n	8003568 <_vfiprintf_r+0x8c>
 80035ea:	9a03      	ldr	r2, [sp, #12]
 80035ec:	1d11      	adds	r1, r2, #4
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	9103      	str	r1, [sp, #12]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	db01      	blt.n	80035fa <_vfiprintf_r+0x11e>
 80035f6:	9207      	str	r2, [sp, #28]
 80035f8:	e004      	b.n	8003604 <_vfiprintf_r+0x128>
 80035fa:	4252      	negs	r2, r2
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	9207      	str	r2, [sp, #28]
 8003602:	9304      	str	r3, [sp, #16]
 8003604:	f898 3000 	ldrb.w	r3, [r8]
 8003608:	2b2e      	cmp	r3, #46	; 0x2e
 800360a:	d10e      	bne.n	800362a <_vfiprintf_r+0x14e>
 800360c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003610:	2b2a      	cmp	r3, #42	; 0x2a
 8003612:	d138      	bne.n	8003686 <_vfiprintf_r+0x1aa>
 8003614:	9b03      	ldr	r3, [sp, #12]
 8003616:	f108 0802 	add.w	r8, r8, #2
 800361a:	1d1a      	adds	r2, r3, #4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	9203      	str	r2, [sp, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	bfb8      	it	lt
 8003624:	f04f 33ff 	movlt.w	r3, #4294967295
 8003628:	9305      	str	r3, [sp, #20]
 800362a:	4d33      	ldr	r5, [pc, #204]	; (80036f8 <_vfiprintf_r+0x21c>)
 800362c:	2203      	movs	r2, #3
 800362e:	f898 1000 	ldrb.w	r1, [r8]
 8003632:	4628      	mov	r0, r5
 8003634:	f000 fa9a 	bl	8003b6c <memchr>
 8003638:	b140      	cbz	r0, 800364c <_vfiprintf_r+0x170>
 800363a:	2340      	movs	r3, #64	; 0x40
 800363c:	1b40      	subs	r0, r0, r5
 800363e:	fa03 f000 	lsl.w	r0, r3, r0
 8003642:	9b04      	ldr	r3, [sp, #16]
 8003644:	f108 0801 	add.w	r8, r8, #1
 8003648:	4303      	orrs	r3, r0
 800364a:	9304      	str	r3, [sp, #16]
 800364c:	f898 1000 	ldrb.w	r1, [r8]
 8003650:	2206      	movs	r2, #6
 8003652:	482a      	ldr	r0, [pc, #168]	; (80036fc <_vfiprintf_r+0x220>)
 8003654:	f108 0701 	add.w	r7, r8, #1
 8003658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800365c:	f000 fa86 	bl	8003b6c <memchr>
 8003660:	2800      	cmp	r0, #0
 8003662:	d037      	beq.n	80036d4 <_vfiprintf_r+0x1f8>
 8003664:	4b26      	ldr	r3, [pc, #152]	; (8003700 <_vfiprintf_r+0x224>)
 8003666:	bb1b      	cbnz	r3, 80036b0 <_vfiprintf_r+0x1d4>
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	3307      	adds	r3, #7
 800366c:	f023 0307 	bic.w	r3, r3, #7
 8003670:	3308      	adds	r3, #8
 8003672:	9303      	str	r3, [sp, #12]
 8003674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003676:	444b      	add	r3, r9
 8003678:	9309      	str	r3, [sp, #36]	; 0x24
 800367a:	e750      	b.n	800351e <_vfiprintf_r+0x42>
 800367c:	fb05 3202 	mla	r2, r5, r2, r3
 8003680:	2001      	movs	r0, #1
 8003682:	4688      	mov	r8, r1
 8003684:	e78a      	b.n	800359c <_vfiprintf_r+0xc0>
 8003686:	2300      	movs	r3, #0
 8003688:	250a      	movs	r5, #10
 800368a:	4619      	mov	r1, r3
 800368c:	f108 0801 	add.w	r8, r8, #1
 8003690:	9305      	str	r3, [sp, #20]
 8003692:	4640      	mov	r0, r8
 8003694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003698:	3a30      	subs	r2, #48	; 0x30
 800369a:	2a09      	cmp	r2, #9
 800369c:	d903      	bls.n	80036a6 <_vfiprintf_r+0x1ca>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0c3      	beq.n	800362a <_vfiprintf_r+0x14e>
 80036a2:	9105      	str	r1, [sp, #20]
 80036a4:	e7c1      	b.n	800362a <_vfiprintf_r+0x14e>
 80036a6:	fb05 2101 	mla	r1, r5, r1, r2
 80036aa:	2301      	movs	r3, #1
 80036ac:	4680      	mov	r8, r0
 80036ae:	e7f0      	b.n	8003692 <_vfiprintf_r+0x1b6>
 80036b0:	ab03      	add	r3, sp, #12
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4622      	mov	r2, r4
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <_vfiprintf_r+0x228>)
 80036b8:	a904      	add	r1, sp, #16
 80036ba:	4630      	mov	r0, r6
 80036bc:	f3af 8000 	nop.w
 80036c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036c4:	4681      	mov	r9, r0
 80036c6:	d1d5      	bne.n	8003674 <_vfiprintf_r+0x198>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	065b      	lsls	r3, r3, #25
 80036cc:	f53f af7e 	bmi.w	80035cc <_vfiprintf_r+0xf0>
 80036d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036d2:	e77d      	b.n	80035d0 <_vfiprintf_r+0xf4>
 80036d4:	ab03      	add	r3, sp, #12
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4622      	mov	r2, r4
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <_vfiprintf_r+0x228>)
 80036dc:	a904      	add	r1, sp, #16
 80036de:	4630      	mov	r0, r6
 80036e0:	f000 f888 	bl	80037f4 <_printf_i>
 80036e4:	e7ec      	b.n	80036c0 <_vfiprintf_r+0x1e4>
 80036e6:	bf00      	nop
 80036e8:	08003cc8 	.word	0x08003cc8
 80036ec:	08003d08 	.word	0x08003d08
 80036f0:	08003ce8 	.word	0x08003ce8
 80036f4:	08003ca8 	.word	0x08003ca8
 80036f8:	08003d0e 	.word	0x08003d0e
 80036fc:	08003d12 	.word	0x08003d12
 8003700:	00000000 	.word	0x00000000
 8003704:	080034b7 	.word	0x080034b7

08003708 <_printf_common>:
 8003708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800370c:	4691      	mov	r9, r2
 800370e:	461f      	mov	r7, r3
 8003710:	688a      	ldr	r2, [r1, #8]
 8003712:	690b      	ldr	r3, [r1, #16]
 8003714:	4606      	mov	r6, r0
 8003716:	4293      	cmp	r3, r2
 8003718:	bfb8      	it	lt
 800371a:	4613      	movlt	r3, r2
 800371c:	f8c9 3000 	str.w	r3, [r9]
 8003720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003724:	460c      	mov	r4, r1
 8003726:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800372a:	b112      	cbz	r2, 8003732 <_printf_common+0x2a>
 800372c:	3301      	adds	r3, #1
 800372e:	f8c9 3000 	str.w	r3, [r9]
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	0699      	lsls	r1, r3, #26
 8003736:	bf42      	ittt	mi
 8003738:	f8d9 3000 	ldrmi.w	r3, [r9]
 800373c:	3302      	addmi	r3, #2
 800373e:	f8c9 3000 	strmi.w	r3, [r9]
 8003742:	6825      	ldr	r5, [r4, #0]
 8003744:	f015 0506 	ands.w	r5, r5, #6
 8003748:	d107      	bne.n	800375a <_printf_common+0x52>
 800374a:	f104 0a19 	add.w	sl, r4, #25
 800374e:	68e3      	ldr	r3, [r4, #12]
 8003750:	f8d9 2000 	ldr.w	r2, [r9]
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	42ab      	cmp	r3, r5
 8003758:	dc29      	bgt.n	80037ae <_printf_common+0xa6>
 800375a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	3300      	adds	r3, #0
 8003762:	bf18      	it	ne
 8003764:	2301      	movne	r3, #1
 8003766:	0692      	lsls	r2, r2, #26
 8003768:	d42e      	bmi.n	80037c8 <_printf_common+0xc0>
 800376a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800376e:	4639      	mov	r1, r7
 8003770:	4630      	mov	r0, r6
 8003772:	47c0      	blx	r8
 8003774:	3001      	adds	r0, #1
 8003776:	d021      	beq.n	80037bc <_printf_common+0xb4>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	68e5      	ldr	r5, [r4, #12]
 800377c:	f003 0306 	and.w	r3, r3, #6
 8003780:	2b04      	cmp	r3, #4
 8003782:	bf18      	it	ne
 8003784:	2500      	movne	r5, #0
 8003786:	f8d9 2000 	ldr.w	r2, [r9]
 800378a:	f04f 0900 	mov.w	r9, #0
 800378e:	bf08      	it	eq
 8003790:	1aad      	subeq	r5, r5, r2
 8003792:	68a3      	ldr	r3, [r4, #8]
 8003794:	6922      	ldr	r2, [r4, #16]
 8003796:	bf08      	it	eq
 8003798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800379c:	4293      	cmp	r3, r2
 800379e:	bfc4      	itt	gt
 80037a0:	1a9b      	subgt	r3, r3, r2
 80037a2:	18ed      	addgt	r5, r5, r3
 80037a4:	341a      	adds	r4, #26
 80037a6:	454d      	cmp	r5, r9
 80037a8:	d11a      	bne.n	80037e0 <_printf_common+0xd8>
 80037aa:	2000      	movs	r0, #0
 80037ac:	e008      	b.n	80037c0 <_printf_common+0xb8>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4652      	mov	r2, sl
 80037b2:	4639      	mov	r1, r7
 80037b4:	4630      	mov	r0, r6
 80037b6:	47c0      	blx	r8
 80037b8:	3001      	adds	r0, #1
 80037ba:	d103      	bne.n	80037c4 <_printf_common+0xbc>
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c4:	3501      	adds	r5, #1
 80037c6:	e7c2      	b.n	800374e <_printf_common+0x46>
 80037c8:	2030      	movs	r0, #48	; 0x30
 80037ca:	18e1      	adds	r1, r4, r3
 80037cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037d6:	4422      	add	r2, r4
 80037d8:	3302      	adds	r3, #2
 80037da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037de:	e7c4      	b.n	800376a <_printf_common+0x62>
 80037e0:	2301      	movs	r3, #1
 80037e2:	4622      	mov	r2, r4
 80037e4:	4639      	mov	r1, r7
 80037e6:	4630      	mov	r0, r6
 80037e8:	47c0      	blx	r8
 80037ea:	3001      	adds	r0, #1
 80037ec:	d0e6      	beq.n	80037bc <_printf_common+0xb4>
 80037ee:	f109 0901 	add.w	r9, r9, #1
 80037f2:	e7d8      	b.n	80037a6 <_printf_common+0x9e>

080037f4 <_printf_i>:
 80037f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037fc:	460c      	mov	r4, r1
 80037fe:	7e09      	ldrb	r1, [r1, #24]
 8003800:	b085      	sub	sp, #20
 8003802:	296e      	cmp	r1, #110	; 0x6e
 8003804:	4617      	mov	r7, r2
 8003806:	4606      	mov	r6, r0
 8003808:	4698      	mov	r8, r3
 800380a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800380c:	f000 80b3 	beq.w	8003976 <_printf_i+0x182>
 8003810:	d822      	bhi.n	8003858 <_printf_i+0x64>
 8003812:	2963      	cmp	r1, #99	; 0x63
 8003814:	d036      	beq.n	8003884 <_printf_i+0x90>
 8003816:	d80a      	bhi.n	800382e <_printf_i+0x3a>
 8003818:	2900      	cmp	r1, #0
 800381a:	f000 80b9 	beq.w	8003990 <_printf_i+0x19c>
 800381e:	2958      	cmp	r1, #88	; 0x58
 8003820:	f000 8083 	beq.w	800392a <_printf_i+0x136>
 8003824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003828:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800382c:	e032      	b.n	8003894 <_printf_i+0xa0>
 800382e:	2964      	cmp	r1, #100	; 0x64
 8003830:	d001      	beq.n	8003836 <_printf_i+0x42>
 8003832:	2969      	cmp	r1, #105	; 0x69
 8003834:	d1f6      	bne.n	8003824 <_printf_i+0x30>
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	0605      	lsls	r5, r0, #24
 800383c:	f103 0104 	add.w	r1, r3, #4
 8003840:	d52a      	bpl.n	8003898 <_printf_i+0xa4>
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6011      	str	r1, [r2, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	da03      	bge.n	8003852 <_printf_i+0x5e>
 800384a:	222d      	movs	r2, #45	; 0x2d
 800384c:	425b      	negs	r3, r3
 800384e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003852:	486f      	ldr	r0, [pc, #444]	; (8003a10 <_printf_i+0x21c>)
 8003854:	220a      	movs	r2, #10
 8003856:	e039      	b.n	80038cc <_printf_i+0xd8>
 8003858:	2973      	cmp	r1, #115	; 0x73
 800385a:	f000 809d 	beq.w	8003998 <_printf_i+0x1a4>
 800385e:	d808      	bhi.n	8003872 <_printf_i+0x7e>
 8003860:	296f      	cmp	r1, #111	; 0x6f
 8003862:	d020      	beq.n	80038a6 <_printf_i+0xb2>
 8003864:	2970      	cmp	r1, #112	; 0x70
 8003866:	d1dd      	bne.n	8003824 <_printf_i+0x30>
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	f043 0320 	orr.w	r3, r3, #32
 800386e:	6023      	str	r3, [r4, #0]
 8003870:	e003      	b.n	800387a <_printf_i+0x86>
 8003872:	2975      	cmp	r1, #117	; 0x75
 8003874:	d017      	beq.n	80038a6 <_printf_i+0xb2>
 8003876:	2978      	cmp	r1, #120	; 0x78
 8003878:	d1d4      	bne.n	8003824 <_printf_i+0x30>
 800387a:	2378      	movs	r3, #120	; 0x78
 800387c:	4865      	ldr	r0, [pc, #404]	; (8003a14 <_printf_i+0x220>)
 800387e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003882:	e055      	b.n	8003930 <_printf_i+0x13c>
 8003884:	6813      	ldr	r3, [r2, #0]
 8003886:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800388a:	1d19      	adds	r1, r3, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6011      	str	r1, [r2, #0]
 8003890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003894:	2301      	movs	r3, #1
 8003896:	e08c      	b.n	80039b2 <_printf_i+0x1be>
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800389e:	6011      	str	r1, [r2, #0]
 80038a0:	bf18      	it	ne
 80038a2:	b21b      	sxthne	r3, r3
 80038a4:	e7cf      	b.n	8003846 <_printf_i+0x52>
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	6825      	ldr	r5, [r4, #0]
 80038aa:	1d18      	adds	r0, r3, #4
 80038ac:	6010      	str	r0, [r2, #0]
 80038ae:	0628      	lsls	r0, r5, #24
 80038b0:	d501      	bpl.n	80038b6 <_printf_i+0xc2>
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e002      	b.n	80038bc <_printf_i+0xc8>
 80038b6:	0668      	lsls	r0, r5, #25
 80038b8:	d5fb      	bpl.n	80038b2 <_printf_i+0xbe>
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	296f      	cmp	r1, #111	; 0x6f
 80038be:	bf14      	ite	ne
 80038c0:	220a      	movne	r2, #10
 80038c2:	2208      	moveq	r2, #8
 80038c4:	4852      	ldr	r0, [pc, #328]	; (8003a10 <_printf_i+0x21c>)
 80038c6:	2100      	movs	r1, #0
 80038c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038cc:	6865      	ldr	r5, [r4, #4]
 80038ce:	2d00      	cmp	r5, #0
 80038d0:	60a5      	str	r5, [r4, #8]
 80038d2:	f2c0 8095 	blt.w	8003a00 <_printf_i+0x20c>
 80038d6:	6821      	ldr	r1, [r4, #0]
 80038d8:	f021 0104 	bic.w	r1, r1, #4
 80038dc:	6021      	str	r1, [r4, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d13d      	bne.n	800395e <_printf_i+0x16a>
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	f040 808e 	bne.w	8003a04 <_printf_i+0x210>
 80038e8:	4665      	mov	r5, ip
 80038ea:	2a08      	cmp	r2, #8
 80038ec:	d10b      	bne.n	8003906 <_printf_i+0x112>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	07db      	lsls	r3, r3, #31
 80038f2:	d508      	bpl.n	8003906 <_printf_i+0x112>
 80038f4:	6923      	ldr	r3, [r4, #16]
 80038f6:	6862      	ldr	r2, [r4, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	bfde      	ittt	le
 80038fc:	2330      	movle	r3, #48	; 0x30
 80038fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003902:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003906:	ebac 0305 	sub.w	r3, ip, r5
 800390a:	6123      	str	r3, [r4, #16]
 800390c:	f8cd 8000 	str.w	r8, [sp]
 8003910:	463b      	mov	r3, r7
 8003912:	aa03      	add	r2, sp, #12
 8003914:	4621      	mov	r1, r4
 8003916:	4630      	mov	r0, r6
 8003918:	f7ff fef6 	bl	8003708 <_printf_common>
 800391c:	3001      	adds	r0, #1
 800391e:	d14d      	bne.n	80039bc <_printf_i+0x1c8>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	b005      	add	sp, #20
 8003926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800392a:	4839      	ldr	r0, [pc, #228]	; (8003a10 <_printf_i+0x21c>)
 800392c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003930:	6813      	ldr	r3, [r2, #0]
 8003932:	6821      	ldr	r1, [r4, #0]
 8003934:	1d1d      	adds	r5, r3, #4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6015      	str	r5, [r2, #0]
 800393a:	060a      	lsls	r2, r1, #24
 800393c:	d50b      	bpl.n	8003956 <_printf_i+0x162>
 800393e:	07ca      	lsls	r2, r1, #31
 8003940:	bf44      	itt	mi
 8003942:	f041 0120 	orrmi.w	r1, r1, #32
 8003946:	6021      	strmi	r1, [r4, #0]
 8003948:	b91b      	cbnz	r3, 8003952 <_printf_i+0x15e>
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	f022 0220 	bic.w	r2, r2, #32
 8003950:	6022      	str	r2, [r4, #0]
 8003952:	2210      	movs	r2, #16
 8003954:	e7b7      	b.n	80038c6 <_printf_i+0xd2>
 8003956:	064d      	lsls	r5, r1, #25
 8003958:	bf48      	it	mi
 800395a:	b29b      	uxthmi	r3, r3
 800395c:	e7ef      	b.n	800393e <_printf_i+0x14a>
 800395e:	4665      	mov	r5, ip
 8003960:	fbb3 f1f2 	udiv	r1, r3, r2
 8003964:	fb02 3311 	mls	r3, r2, r1, r3
 8003968:	5cc3      	ldrb	r3, [r0, r3]
 800396a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800396e:	460b      	mov	r3, r1
 8003970:	2900      	cmp	r1, #0
 8003972:	d1f5      	bne.n	8003960 <_printf_i+0x16c>
 8003974:	e7b9      	b.n	80038ea <_printf_i+0xf6>
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	6825      	ldr	r5, [r4, #0]
 800397a:	1d18      	adds	r0, r3, #4
 800397c:	6961      	ldr	r1, [r4, #20]
 800397e:	6010      	str	r0, [r2, #0]
 8003980:	0628      	lsls	r0, r5, #24
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	d501      	bpl.n	800398a <_printf_i+0x196>
 8003986:	6019      	str	r1, [r3, #0]
 8003988:	e002      	b.n	8003990 <_printf_i+0x19c>
 800398a:	066a      	lsls	r2, r5, #25
 800398c:	d5fb      	bpl.n	8003986 <_printf_i+0x192>
 800398e:	8019      	strh	r1, [r3, #0]
 8003990:	2300      	movs	r3, #0
 8003992:	4665      	mov	r5, ip
 8003994:	6123      	str	r3, [r4, #16]
 8003996:	e7b9      	b.n	800390c <_printf_i+0x118>
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	1d19      	adds	r1, r3, #4
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	681d      	ldr	r5, [r3, #0]
 80039a0:	6862      	ldr	r2, [r4, #4]
 80039a2:	2100      	movs	r1, #0
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 f8e1 	bl	8003b6c <memchr>
 80039aa:	b108      	cbz	r0, 80039b0 <_printf_i+0x1bc>
 80039ac:	1b40      	subs	r0, r0, r5
 80039ae:	6060      	str	r0, [r4, #4]
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	6123      	str	r3, [r4, #16]
 80039b4:	2300      	movs	r3, #0
 80039b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ba:	e7a7      	b.n	800390c <_printf_i+0x118>
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	462a      	mov	r2, r5
 80039c0:	4639      	mov	r1, r7
 80039c2:	4630      	mov	r0, r6
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d0aa      	beq.n	8003920 <_printf_i+0x12c>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	079b      	lsls	r3, r3, #30
 80039ce:	d413      	bmi.n	80039f8 <_printf_i+0x204>
 80039d0:	68e0      	ldr	r0, [r4, #12]
 80039d2:	9b03      	ldr	r3, [sp, #12]
 80039d4:	4298      	cmp	r0, r3
 80039d6:	bfb8      	it	lt
 80039d8:	4618      	movlt	r0, r3
 80039da:	e7a3      	b.n	8003924 <_printf_i+0x130>
 80039dc:	2301      	movs	r3, #1
 80039de:	464a      	mov	r2, r9
 80039e0:	4639      	mov	r1, r7
 80039e2:	4630      	mov	r0, r6
 80039e4:	47c0      	blx	r8
 80039e6:	3001      	adds	r0, #1
 80039e8:	d09a      	beq.n	8003920 <_printf_i+0x12c>
 80039ea:	3501      	adds	r5, #1
 80039ec:	68e3      	ldr	r3, [r4, #12]
 80039ee:	9a03      	ldr	r2, [sp, #12]
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	42ab      	cmp	r3, r5
 80039f4:	dcf2      	bgt.n	80039dc <_printf_i+0x1e8>
 80039f6:	e7eb      	b.n	80039d0 <_printf_i+0x1dc>
 80039f8:	2500      	movs	r5, #0
 80039fa:	f104 0919 	add.w	r9, r4, #25
 80039fe:	e7f5      	b.n	80039ec <_printf_i+0x1f8>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ac      	bne.n	800395e <_printf_i+0x16a>
 8003a04:	7803      	ldrb	r3, [r0, #0]
 8003a06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a0e:	e76c      	b.n	80038ea <_printf_i+0xf6>
 8003a10:	08003d19 	.word	0x08003d19
 8003a14:	08003d2a 	.word	0x08003d2a

08003a18 <_sbrk_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4c05      	ldr	r4, [pc, #20]	; (8003a34 <_sbrk_r+0x1c>)
 8003a1e:	4605      	mov	r5, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	f7fd f894 	bl	8000b50 <_sbrk>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_sbrk_r+0x1a>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_sbrk_r+0x1a>
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20000564 	.word	0x20000564

08003a38 <__sread>:
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a40:	f000 f8a4 	bl	8003b8c <_read_r>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	bfab      	itete	ge
 8003a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a4c:	181b      	addge	r3, r3, r0
 8003a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a52:	bfac      	ite	ge
 8003a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a56:	81a3      	strhlt	r3, [r4, #12]
 8003a58:	bd10      	pop	{r4, pc}

08003a5a <__swrite>:
 8003a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5e:	461f      	mov	r7, r3
 8003a60:	898b      	ldrh	r3, [r1, #12]
 8003a62:	4605      	mov	r5, r0
 8003a64:	05db      	lsls	r3, r3, #23
 8003a66:	460c      	mov	r4, r1
 8003a68:	4616      	mov	r6, r2
 8003a6a:	d505      	bpl.n	8003a78 <__swrite+0x1e>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a74:	f000 f868 	bl	8003b48 <_lseek_r>
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	4632      	mov	r2, r6
 8003a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a80:	81a3      	strh	r3, [r4, #12]
 8003a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a86:	463b      	mov	r3, r7
 8003a88:	4628      	mov	r0, r5
 8003a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8e:	f000 b817 	b.w	8003ac0 <_write_r>

08003a92 <__sseek>:
 8003a92:	b510      	push	{r4, lr}
 8003a94:	460c      	mov	r4, r1
 8003a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9a:	f000 f855 	bl	8003b48 <_lseek_r>
 8003a9e:	1c43      	adds	r3, r0, #1
 8003aa0:	89a3      	ldrh	r3, [r4, #12]
 8003aa2:	bf15      	itete	ne
 8003aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003aae:	81a3      	strheq	r3, [r4, #12]
 8003ab0:	bf18      	it	ne
 8003ab2:	81a3      	strhne	r3, [r4, #12]
 8003ab4:	bd10      	pop	{r4, pc}

08003ab6 <__sclose>:
 8003ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aba:	f000 b813 	b.w	8003ae4 <_close_r>
	...

08003ac0 <_write_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4c05      	ldr	r4, [pc, #20]	; (8003ae0 <_write_r+0x20>)
 8003acc:	6022      	str	r2, [r4, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7fc fff1 	bl	8000ab6 <_write>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_write_r+0x1e>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_write_r+0x1e>
 8003adc:	602b      	str	r3, [r5, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	20000564 	.word	0x20000564

08003ae4 <_close_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4c05      	ldr	r4, [pc, #20]	; (8003b00 <_close_r+0x1c>)
 8003aea:	4605      	mov	r5, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	f7fc fffd 	bl	8000aee <_close>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_close_r+0x1a>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_close_r+0x1a>
 8003afc:	602b      	str	r3, [r5, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	20000564 	.word	0x20000564

08003b04 <_fstat_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	2300      	movs	r3, #0
 8003b08:	4c06      	ldr	r4, [pc, #24]	; (8003b24 <_fstat_r+0x20>)
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	4611      	mov	r1, r2
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	f7fc fff7 	bl	8000b04 <_fstat>
 8003b16:	1c43      	adds	r3, r0, #1
 8003b18:	d102      	bne.n	8003b20 <_fstat_r+0x1c>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	b103      	cbz	r3, 8003b20 <_fstat_r+0x1c>
 8003b1e:	602b      	str	r3, [r5, #0]
 8003b20:	bd38      	pop	{r3, r4, r5, pc}
 8003b22:	bf00      	nop
 8003b24:	20000564 	.word	0x20000564

08003b28 <_isatty_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4c05      	ldr	r4, [pc, #20]	; (8003b44 <_isatty_r+0x1c>)
 8003b2e:	4605      	mov	r5, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	f7fc fff5 	bl	8000b22 <_isatty>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_isatty_r+0x1a>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_isatty_r+0x1a>
 8003b40:	602b      	str	r3, [r5, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	20000564 	.word	0x20000564

08003b48 <_lseek_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	2200      	movs	r2, #0
 8003b52:	4c05      	ldr	r4, [pc, #20]	; (8003b68 <_lseek_r+0x20>)
 8003b54:	6022      	str	r2, [r4, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f7fc ffed 	bl	8000b36 <_lseek>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_lseek_r+0x1e>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_lseek_r+0x1e>
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	20000564 	.word	0x20000564

08003b6c <memchr>:
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	b2c9      	uxtb	r1, r1
 8003b70:	4402      	add	r2, r0
 8003b72:	4290      	cmp	r0, r2
 8003b74:	4603      	mov	r3, r0
 8003b76:	d101      	bne.n	8003b7c <memchr+0x10>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e003      	b.n	8003b84 <memchr+0x18>
 8003b7c:	781c      	ldrb	r4, [r3, #0]
 8003b7e:	3001      	adds	r0, #1
 8003b80:	428c      	cmp	r4, r1
 8003b82:	d1f6      	bne.n	8003b72 <memchr+0x6>
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd10      	pop	{r4, pc}

08003b88 <__malloc_lock>:
 8003b88:	4770      	bx	lr

08003b8a <__malloc_unlock>:
 8003b8a:	4770      	bx	lr

08003b8c <_read_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4605      	mov	r5, r0
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	2200      	movs	r2, #0
 8003b96:	4c05      	ldr	r4, [pc, #20]	; (8003bac <_read_r+0x20>)
 8003b98:	6022      	str	r2, [r4, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fc ff6e 	bl	8000a7c <_read>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_read_r+0x1e>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_read_r+0x1e>
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	20000564 	.word	0x20000564

08003bb0 <_init>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr

08003bbc <_fini>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr
